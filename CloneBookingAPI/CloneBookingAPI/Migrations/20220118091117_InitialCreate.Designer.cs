// <auto-generated />
using System;
using CloneBookingAPI.Services.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CloneBookingAPI.Migrations
{
    [DbContext(typeof(ApartProjectDbContext))]
    [Migration("20220118091117_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Configurations.Review.ReviewMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ReviewMessages");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.AreaInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AreaInfoTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AreaInfoTypeId");

                    b.ToTable("AreaInfos");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.AreaInfoType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AreaInfoTypes");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.BookingCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Hotels"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Places of interest"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Homes"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Apartments"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Resorts"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Villas"
                        },
                        new
                        {
                            Id = 7,
                            Category = "Hostels"
                        },
                        new
                        {
                            Id = 8,
                            Category = "B&Bs"
                        },
                        new
                        {
                            Id = 9,
                            Category = "Guest houses"
                        },
                        new
                        {
                            Id = 10,
                            Category = "Unique places to stay"
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.CardType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CardTypes");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("FacilityTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<int?>("SuggestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FacilityTypeId");

                    b.HasIndex("ImageId");

                    b.HasIndex("SuggestionId");

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.FacilityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FacilityTypes");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.FlightBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("FlightBookings");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Flights.FlightClassType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.ToTable("FlightClassTypes");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Language");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Location.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddressText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Address");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Location.Airport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ImageId");

                    b.ToTable("Airports");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Location.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Location.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Location.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ImageId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Location.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ImageId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("EmitterId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("EmitterId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Payment.BookingPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AmountInUS")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountInUserCurrency")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CancellationPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DamageDeposit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ResortFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TAX")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Payment.CreditCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CVC")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("CardTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Cardholder")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CardTypeId");

                    b.ToTable("CreditCards");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Payment.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreditCardId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreditCardId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.PromoCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("PercentDiscount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PromoCodes");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Review.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BookingId")
                        .HasColumnType("int");

                    b.Property<long>("DislikesAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<long>("LikesAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<int?>("MessageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SuggestionId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("MessageId")
                        .IsUnique()
                        .HasFilter("[MessageId] IS NOT NULL");

                    b.HasIndex("SuggestionId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Review.ReviewCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int?>("SuggestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SuggestionId");

                    b.ToTable("ReviewCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Staff"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Facilities"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Cleanliness"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Comfort"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Value for money"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Location"
                        },
                        new
                        {
                            Id = 7,
                            Category = "Free WiFi"
                        },
                        new
                        {
                            Id = 8,
                            Category = "Pets allowed"
                        },
                        new
                        {
                            Id = 9,
                            Category = "Air conditioning"
                        },
                        new
                        {
                            Id = 10,
                            Category = "Private bathroom"
                        },
                        new
                        {
                            Id = 11,
                            Category = "City view"
                        },
                        new
                        {
                            Id = 12,
                            Category = "Private bathroom"
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "user"
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.ServiceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Stays"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Flights"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Car rentals"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Attractions"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Airport taxis"
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Services.AirportTaxiBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("AirportTaxiBookings");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Services.AttractionBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("AttractionBookings");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Services.CarRentalBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("CarRentalBookings");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.StayBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BookingCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsForWork")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRequestedAirportShuttle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRequestedRentingCar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int?>("PriceId")
                        .HasColumnType("int");

                    b.Property<string>("PromoCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("ServiceCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialRequests")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("SuggestionId")
                        .HasColumnType("int");

                    b.Property<string>("UniqueNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("BookingCategoryId");

                    b.HasIndex("CartId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PriceId")
                        .IsUnique()
                        .HasFilter("[PriceId] IS NOT NULL");

                    b.HasIndex("ServiceCategoryId");

                    b.HasIndex("SuggestionId");

                    b.HasIndex("UserId");

                    b.ToTable("StayBookings");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AmountInUS")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountInUserCurrency")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsSmokingAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuite")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("RoomSize")
                        .HasColumnType("int");

                    b.Property<int?>("RoomTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Sleeps")
                        .HasColumnType("int");

                    b.Property<int?>("StayBookingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomTypeId");

                    b.HasIndex("StayBookingId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("RoomsLeft")
                        .HasColumnType("int");

                    b.Property<int?>("SuggestionId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("SuggestionId");

                    b.ToTable("RoomTypes");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.Suggestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("BookingCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("BookingCategoryId");

                    b.HasIndex("ServiceCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Suggestions");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.SuggestionHighlight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<int?>("RoomId1")
                        .HasColumnType("int");

                    b.Property<int?>("SuggestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("RoomId");

                    b.HasIndex("RoomId1");

                    b.HasIndex("SuggestionId");

                    b.ToTable("SuggestionHighlights");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.SuggestionReviewGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ReviewCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("ReviewCategoryId");

                    b.ToTable("SuggestionReviewGrades");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.SuggestionRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("SuggestionRuleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SuggestionRuleTypeId");

                    b.ToTable("SuggestionRules");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.SuggestionRuleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SuggestionRuleTypes");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.SurroundingObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("SuggestionId")
                        .HasColumnType("int");

                    b.Property<int?>("SurroundingObjectTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SuggestionId");

                    b.HasIndex("SurroundingObjectTypeId");

                    b.ToTable("SurroundingObjects");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.SurroundingObjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SurroundingObjectTypes");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DisplayName")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<int?>("FavoriteId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("FavoriteId")
                        .IsUnique()
                        .HasFilter("[FavoriteId] IS NOT NULL");

                    b.HasIndex("LanguageId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.UserData.TempUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("TempUsers");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.UserProfile.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.UserProfile.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Gender");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.UserProfile.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int?>("GenderId")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Nationality")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("GenderId");

                    b.HasIndex("ImageId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("FavoriteSuggestion", b =>
                {
                    b.Property<int>("FavoritesId")
                        .HasColumnType("int");

                    b.Property<int>("SuggestionsId")
                        .HasColumnType("int");

                    b.HasKey("FavoritesId", "SuggestionsId");

                    b.HasIndex("SuggestionsId");

                    b.ToTable("FavoriteSuggestion");
                });

            modelBuilder.Entity("ImageSuggestion", b =>
                {
                    b.Property<int>("ImagesId")
                        .HasColumnType("int");

                    b.Property<int>("SuggestionsId")
                        .HasColumnType("int");

                    b.HasKey("ImagesId", "SuggestionsId");

                    b.HasIndex("SuggestionsId");

                    b.ToTable("ImageSuggestion");
                });

            modelBuilder.Entity("StayBookingTempUser", b =>
                {
                    b.Property<int>("BookingsId")
                        .HasColumnType("int");

                    b.Property<int>("GuestsId")
                        .HasColumnType("int");

                    b.HasKey("BookingsId", "GuestsId");

                    b.HasIndex("GuestsId");

                    b.ToTable("StayBookingTempUser");
                });

            modelBuilder.Entity("SuggestionSuggestionReviewGrade", b =>
                {
                    b.Property<int>("SuggestionReviewGradesId")
                        .HasColumnType("int");

                    b.Property<int>("SuggestionsId")
                        .HasColumnType("int");

                    b.HasKey("SuggestionReviewGradesId", "SuggestionsId");

                    b.HasIndex("SuggestionsId");

                    b.ToTable("SuggestionSuggestionReviewGrade");
                });

            modelBuilder.Entity("SuggestionSuggestionRule", b =>
                {
                    b.Property<int>("SuggestionRulesId")
                        .HasColumnType("int");

                    b.Property<int>("SuggestionsId")
                        .HasColumnType("int");

                    b.HasKey("SuggestionRulesId", "SuggestionsId");

                    b.HasIndex("SuggestionsId");

                    b.ToTable("SuggestionSuggestionRule");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.AreaInfo", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.AreaInfoType", "AreaInfoType")
                        .WithMany("AreaInfos")
                        .HasForeignKey("AreaInfoTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AreaInfoType");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Cart", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("CloneBookingAPI.Services.Database.Models.Cart", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Facility", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.FacilityType", "FacilityType")
                        .WithMany("Facilities")
                        .HasForeignKey("FacilityTypeId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Image", "Image")
                        .WithMany("Facilities")
                        .HasForeignKey("ImageId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.Suggestion", "Suggestion")
                        .WithMany("Facilities")
                        .HasForeignKey("SuggestionId");

                    b.Navigation("FacilityType");

                    b.Navigation("Image");

                    b.Navigation("Suggestion");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.FlightBooking", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Cart", null)
                        .WithMany("FlightBookings")
                        .HasForeignKey("CartId");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Location.Address", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Location.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Location.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("City");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Location.Airport", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Location.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Address");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Location.City", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Image", "Image")
                        .WithMany("Cities")
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Location.Country", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Image", "Image")
                        .WithMany("Countries")
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Location.District", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Location.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Image", "Image")
                        .WithMany("Districts")
                        .HasForeignKey("ImageId");

                    b.Navigation("Address");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Location.Region", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Location.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Image", "Image")
                        .WithMany("Regions")
                        .HasForeignKey("ImageId");

                    b.Navigation("Address");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Notification", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.User", "EmitterUser")
                        .WithMany()
                        .HasForeignKey("EmitterId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.User", "RecipientUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("EmitterUser");

                    b.Navigation("RecipientUser");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Payment.CreditCard", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.CardType", "CardType")
                        .WithMany("CreditCards")
                        .HasForeignKey("CardTypeId");

                    b.Navigation("CardType");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Payment.Payment", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Payment.CreditCard", "CreditCard")
                        .WithMany("Payments")
                        .HasForeignKey("CreditCardId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.PaymentType", "PaymentType")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentTypeId");

                    b.Navigation("CreditCard");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Review.Review", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.StayBooking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId");

                    b.HasOne("CloneBookingAPI.Services.Database.Configurations.Review.ReviewMessage", "Message")
                        .WithOne("Review")
                        .HasForeignKey("CloneBookingAPI.Services.Database.Models.Review.Review", "MessageId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.Suggestion", "Suggestion")
                        .WithMany("Reviews")
                        .HasForeignKey("SuggestionId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Booking");

                    b.Navigation("Message");

                    b.Navigation("Suggestion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Review.ReviewCategory", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.Suggestion", null)
                        .WithMany("AdditionalServices")
                        .HasForeignKey("SuggestionId");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Services.AirportTaxiBooking", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Cart", null)
                        .WithMany("AirportTaxiBookings")
                        .HasForeignKey("CartId");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Services.AttractionBooking", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Cart", null)
                        .WithMany("AttractionBookings")
                        .HasForeignKey("CartId");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Services.CarRentalBooking", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Cart", null)
                        .WithMany("CarRentalBookings")
                        .HasForeignKey("CartId");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.StayBooking", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Location.Address", "Address")
                        .WithMany("Booking")
                        .HasForeignKey("AddressId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.BookingCategory", "BookingCategory")
                        .WithMany("Bookings")
                        .HasForeignKey("BookingCategoryId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Cart", null)
                        .WithMany("StayBookings")
                        .HasForeignKey("CartId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Payment.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Payment.BookingPrice", "Price")
                        .WithOne("Booking")
                        .HasForeignKey("CloneBookingAPI.Services.Database.Models.StayBooking", "PriceId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.ServiceCategory", "ServiceCategory")
                        .WithMany("Bookings")
                        .HasForeignKey("ServiceCategoryId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.Suggestion", "Suggestion")
                        .WithMany("StayBookings")
                        .HasForeignKey("SuggestionId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Address");

                    b.Navigation("BookingCategory");

                    b.Navigation("Payment");

                    b.Navigation("Price");

                    b.Navigation("ServiceCategory");

                    b.Navigation("Suggestion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.Room", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.StayBooking", null)
                        .WithMany("Rooms")
                        .HasForeignKey("StayBookingId");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.RoomType", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.Suggestion", "Suggestion")
                        .WithMany("RoomTypes")
                        .HasForeignKey("SuggestionId");

                    b.Navigation("Suggestion");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.Suggestion", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Location.Address", "Address")
                        .WithMany("Suggestions")
                        .HasForeignKey("AddressId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.BookingCategory", "BookingCategory")
                        .WithMany("Suggestions")
                        .HasForeignKey("BookingCategoryId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.ServiceCategory", "ServiceCategory")
                        .WithMany("Suggestions")
                        .HasForeignKey("ServiceCategoryId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Address");

                    b.Navigation("BookingCategory");

                    b.Navigation("ServiceCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.SuggestionHighlight", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Image", "Image")
                        .WithMany("SuggestionHighlights")
                        .HasForeignKey("ImageId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.RoomType", "Room")
                        .WithMany("Highlights")
                        .HasForeignKey("RoomId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.Room", null)
                        .WithMany("Facilities")
                        .HasForeignKey("RoomId1");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.Suggestion", "Suggestion")
                        .WithMany("Highlights")
                        .HasForeignKey("SuggestionId");

                    b.Navigation("Image");

                    b.Navigation("Room");

                    b.Navigation("Suggestion");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.SuggestionReviewGrade", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Review.ReviewCategory", "ReviewCategory")
                        .WithMany("SuggestionReviewGrades")
                        .HasForeignKey("ReviewCategoryId");

                    b.Navigation("ReviewCategory");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.SuggestionRule", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.SuggestionRuleType", "SuggestionRuleType")
                        .WithMany("SuggestionRules")
                        .HasForeignKey("SuggestionRuleTypeId");

                    b.Navigation("SuggestionRuleType");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.SurroundingObject", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.Suggestion", "Suggestion")
                        .WithMany("SurroundingObjects")
                        .HasForeignKey("SuggestionId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.SurroundingObjectType", "SurroundingObjectType")
                        .WithMany("SurroundingObjects")
                        .HasForeignKey("SurroundingObjectTypeId");

                    b.Navigation("Suggestion");

                    b.Navigation("SurroundingObjectType");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.User", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.UserProfile.Favorite", "Favorite")
                        .WithOne("User")
                        .HasForeignKey("CloneBookingAPI.Services.Database.Models.User", "FavoriteId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Language", null)
                        .WithMany("Users")
                        .HasForeignKey("LanguageId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Favorite");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.UserProfile.UserProfile", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Location.Address", "Address")
                        .WithMany("UserProfiles")
                        .HasForeignKey("AddressId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Currency", "Currency")
                        .WithMany("UserProfiles")
                        .HasForeignKey("CurrencyId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.UserProfile.Gender", "Gender")
                        .WithMany("UserProfiles")
                        .HasForeignKey("GenderId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Image", "Image")
                        .WithMany("UserProfiles")
                        .HasForeignKey("ImageId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("CloneBookingAPI.Services.Database.Models.UserProfile.UserProfile", "UserId");

                    b.Navigation("Address");

                    b.Navigation("Currency");

                    b.Navigation("Gender");

                    b.Navigation("Image");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FavoriteSuggestion", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.UserProfile.Favorite", null)
                        .WithMany()
                        .HasForeignKey("FavoritesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.Suggestion", null)
                        .WithMany()
                        .HasForeignKey("SuggestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ImageSuggestion", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Image", null)
                        .WithMany()
                        .HasForeignKey("ImagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.Suggestion", null)
                        .WithMany()
                        .HasForeignKey("SuggestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StayBookingTempUser", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.StayBooking", null)
                        .WithMany()
                        .HasForeignKey("BookingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloneBookingAPI.Services.Database.Models.UserData.TempUser", null)
                        .WithMany()
                        .HasForeignKey("GuestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SuggestionSuggestionReviewGrade", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.SuggestionReviewGrade", null)
                        .WithMany()
                        .HasForeignKey("SuggestionReviewGradesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.Suggestion", null)
                        .WithMany()
                        .HasForeignKey("SuggestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SuggestionSuggestionRule", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.SuggestionRule", null)
                        .WithMany()
                        .HasForeignKey("SuggestionRulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.Suggestion", null)
                        .WithMany()
                        .HasForeignKey("SuggestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Configurations.Review.ReviewMessage", b =>
                {
                    b.Navigation("Review");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.AreaInfoType", b =>
                {
                    b.Navigation("AreaInfos");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.BookingCategory", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Suggestions");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.CardType", b =>
                {
                    b.Navigation("CreditCards");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Cart", b =>
                {
                    b.Navigation("AirportTaxiBookings");

                    b.Navigation("AttractionBookings");

                    b.Navigation("CarRentalBookings");

                    b.Navigation("FlightBookings");

                    b.Navigation("StayBookings");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Currency", b =>
                {
                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.FacilityType", b =>
                {
                    b.Navigation("Facilities");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Image", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Countries");

                    b.Navigation("Districts");

                    b.Navigation("Facilities");

                    b.Navigation("Regions");

                    b.Navigation("SuggestionHighlights");

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Language", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Location.Address", b =>
                {
                    b.Navigation("Booking");

                    b.Navigation("Suggestions");

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Payment.BookingPrice", b =>
                {
                    b.Navigation("Booking");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Payment.CreditCard", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.PaymentType", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Review.ReviewCategory", b =>
                {
                    b.Navigation("SuggestionReviewGrades");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.ServiceCategory", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Suggestions");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.StayBooking", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.Room", b =>
                {
                    b.Navigation("Facilities");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.RoomType", b =>
                {
                    b.Navigation("Highlights");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.Suggestion", b =>
                {
                    b.Navigation("AdditionalServices");

                    b.Navigation("Facilities");

                    b.Navigation("Highlights");

                    b.Navigation("Reviews");

                    b.Navigation("RoomTypes");

                    b.Navigation("StayBookings");

                    b.Navigation("SurroundingObjects");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.SuggestionRuleType", b =>
                {
                    b.Navigation("SuggestionRules");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.SurroundingObjectType", b =>
                {
                    b.Navigation("SurroundingObjects");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.User", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.UserProfile.Favorite", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.UserProfile.Gender", b =>
                {
                    b.Navigation("UserProfiles");
                });
#pragma warning restore 612, 618
        }
    }
}
