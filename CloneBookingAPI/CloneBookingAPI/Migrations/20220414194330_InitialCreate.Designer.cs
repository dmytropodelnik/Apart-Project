// <auto-generated />
using System;
using CloneBookingAPI.Services.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CloneBookingAPI.Migrations
{
    [DbContext(typeof(ApartProjectDbContext))]
    [Migration("20220414194330_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BedSuggestion", b =>
                {
                    b.Property<int>("BedsId")
                        .HasColumnType("int");

                    b.Property<int>("SuggestionsId")
                        .HasColumnType("int");

                    b.HasKey("BedsId", "SuggestionsId");

                    b.HasIndex("SuggestionsId");

                    b.ToTable("BedSuggestion");
                });

            modelBuilder.Entity("CloneBookingAPI.Database.Models.InterestPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int?>("SuggestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SuggestionId");

                    b.ToTable("InterestPlaces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Place = "Hotels"
                        },
                        new
                        {
                            Id = 2,
                            Place = "Places of interest"
                        },
                        new
                        {
                            Id = 3,
                            Place = "Homes"
                        },
                        new
                        {
                            Id = 4,
                            Place = "Apartments"
                        },
                        new
                        {
                            Id = 5,
                            Place = "Resorts"
                        },
                        new
                        {
                            Id = 6,
                            Place = "Villas"
                        },
                        new
                        {
                            Id = 7,
                            Place = "Hostels"
                        },
                        new
                        {
                            Id = 8,
                            Place = "B&Bs"
                        },
                        new
                        {
                            Id = 9,
                            Place = "Guest houses"
                        },
                        new
                        {
                            Id = 10,
                            Place = "Unique places to stay"
                        },
                        new
                        {
                            Id = 11,
                            Place = "Vacation Homes"
                        },
                        new
                        {
                            Id = 12,
                            Place = "Serviced Apartments"
                        },
                        new
                        {
                            Id = 13,
                            Place = "Glamping"
                        },
                        new
                        {
                            Id = 14,
                            Place = "Cottages"
                        },
                        new
                        {
                            Id = 15,
                            Place = "Cabins"
                        },
                        new
                        {
                            Id = 16,
                            Place = "Motels"
                        },
                        new
                        {
                            Id = 17,
                            Place = "Ryokans"
                        },
                        new
                        {
                            Id = 18,
                            Place = "Riads"
                        },
                        new
                        {
                            Id = 19,
                            Place = "Resort Villages"
                        },
                        new
                        {
                            Id = 20,
                            Place = "Homestays"
                        },
                        new
                        {
                            Id = 21,
                            Place = "Campgrounds"
                        },
                        new
                        {
                            Id = 22,
                            Place = "Country Houses"
                        },
                        new
                        {
                            Id = 23,
                            Place = "Farm Stays"
                        },
                        new
                        {
                            Id = 24,
                            Place = "Boats"
                        },
                        new
                        {
                            Id = 25,
                            Place = "Luxury Tents"
                        },
                        new
                        {
                            Id = 26,
                            Place = "Self-catering Accommodations"
                        },
                        new
                        {
                            Id = 27,
                            Place = "Tiny houses"
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Database.Models.Suggestions.Apartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BathroomsAmount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GuestsLimit")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceInUSD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceInUserCurrency")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RoomsAmount")
                        .HasColumnType("int");

                    b.Property<int?>("SuggestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SuggestionId");

                    b.ToTable("Apartments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BathroomsAmount = 2,
                            Description = "Test apartment description 1",
                            GuestsLimit = 3,
                            PriceInUSD = 25m,
                            PriceInUserCurrency = 250m,
                            RoomsAmount = 2,
                            SuggestionId = 1
                        },
                        new
                        {
                            Id = 2,
                            BathroomsAmount = 3,
                            Description = "Test apartment description 2",
                            GuestsLimit = 5,
                            PriceInUSD = 65m,
                            PriceInUserCurrency = 650m,
                            RoomsAmount = 3,
                            SuggestionId = 15
                        },
                        new
                        {
                            Id = 3,
                            BathroomsAmount = 4,
                            Description = "Test apartment description 27",
                            GuestsLimit = 8,
                            PriceInUSD = 125m,
                            PriceInUserCurrency = 1250m,
                            RoomsAmount = 4,
                            SuggestionId = 27
                        },
                        new
                        {
                            Id = 4,
                            BathroomsAmount = 5,
                            Description = "Test apartment description 57",
                            GuestsLimit = 10,
                            PriceInUSD = 225m,
                            PriceInUserCurrency = 2250m,
                            RoomsAmount = 5,
                            SuggestionId = 57
                        },
                        new
                        {
                            Id = 5,
                            BathroomsAmount = 3,
                            Description = "Test apartment description 101",
                            GuestsLimit = 12,
                            PriceInUSD = 355m,
                            PriceInUserCurrency = 3550m,
                            RoomsAmount = 6,
                            SuggestionId = 101
                        },
                        new
                        {
                            Id = 6,
                            BathroomsAmount = 2,
                            Description = "Test apartment description 1",
                            GuestsLimit = 3,
                            PriceInUSD = 25m,
                            PriceInUserCurrency = 250m,
                            RoomsAmount = 2,
                            SuggestionId = 1
                        },
                        new
                        {
                            Id = 7,
                            BathroomsAmount = 3,
                            Description = "Test apartment description 2",
                            GuestsLimit = 5,
                            PriceInUSD = 65m,
                            PriceInUserCurrency = 650m,
                            RoomsAmount = 3,
                            SuggestionId = 15
                        },
                        new
                        {
                            Id = 8,
                            BathroomsAmount = 4,
                            Description = "Test apartment description 27",
                            GuestsLimit = 8,
                            PriceInUSD = 125m,
                            PriceInUserCurrency = 1250m,
                            RoomsAmount = 4,
                            SuggestionId = 27
                        },
                        new
                        {
                            Id = 9,
                            BathroomsAmount = 5,
                            Description = "Test apartment description 57",
                            GuestsLimit = 10,
                            PriceInUSD = 225m,
                            PriceInUserCurrency = 2250m,
                            RoomsAmount = 5,
                            SuggestionId = 57
                        },
                        new
                        {
                            Id = 10,
                            BathroomsAmount = 3,
                            Description = "Test apartment description 101",
                            GuestsLimit = 12,
                            PriceInUSD = 355m,
                            PriceInUserCurrency = 3550m,
                            RoomsAmount = 6,
                            SuggestionId = 101
                        },
                        new
                        {
                            Id = 11,
                            BathroomsAmount = 2,
                            Description = "Test apartment description 1",
                            GuestsLimit = 3,
                            PriceInUSD = 25m,
                            PriceInUserCurrency = 250m,
                            RoomsAmount = 2,
                            SuggestionId = 1
                        },
                        new
                        {
                            Id = 12,
                            BathroomsAmount = 3,
                            Description = "Test apartment description 2",
                            GuestsLimit = 5,
                            PriceInUSD = 65m,
                            PriceInUserCurrency = 650m,
                            RoomsAmount = 3,
                            SuggestionId = 15
                        },
                        new
                        {
                            Id = 13,
                            BathroomsAmount = 4,
                            Description = "Test apartment description 27",
                            GuestsLimit = 8,
                            PriceInUSD = 125m,
                            PriceInUserCurrency = 1250m,
                            RoomsAmount = 4,
                            SuggestionId = 27
                        },
                        new
                        {
                            Id = 14,
                            BathroomsAmount = 3,
                            Description = "Test apartment description 28",
                            GuestsLimit = 10,
                            PriceInUSD = 228m,
                            PriceInUserCurrency = 2280m,
                            RoomsAmount = 8,
                            SuggestionId = 28
                        },
                        new
                        {
                            Id = 15,
                            BathroomsAmount = 3,
                            Description = "Test apartment description 101",
                            GuestsLimit = 12,
                            PriceInUSD = 355m,
                            PriceInUserCurrency = 3550m,
                            RoomsAmount = 6,
                            SuggestionId = 101
                        },
                        new
                        {
                            Id = 16,
                            BathroomsAmount = 2,
                            Description = "Test apartment description 1",
                            GuestsLimit = 3,
                            PriceInUSD = 25m,
                            PriceInUserCurrency = 250m,
                            RoomsAmount = 2,
                            SuggestionId = 1
                        },
                        new
                        {
                            Id = 17,
                            BathroomsAmount = 3,
                            Description = "Test apartment description 2",
                            GuestsLimit = 5,
                            PriceInUSD = 65m,
                            PriceInUserCurrency = 650m,
                            RoomsAmount = 3,
                            SuggestionId = 15
                        },
                        new
                        {
                            Id = 18,
                            BathroomsAmount = 4,
                            Description = "Test apartment description 27",
                            GuestsLimit = 8,
                            PriceInUSD = 125m,
                            PriceInUserCurrency = 1250m,
                            RoomsAmount = 4,
                            SuggestionId = 27
                        },
                        new
                        {
                            Id = 19,
                            BathroomsAmount = 5,
                            Description = "Test apartment description 57",
                            GuestsLimit = 10,
                            PriceInUSD = 225m,
                            PriceInUserCurrency = 2250m,
                            RoomsAmount = 5,
                            SuggestionId = 57
                        },
                        new
                        {
                            Id = 20,
                            BathroomsAmount = 3,
                            Description = "Test apartment description 101",
                            GuestsLimit = 12,
                            PriceInUSD = 355m,
                            PriceInUserCurrency = 3550m,
                            RoomsAmount = 6,
                            SuggestionId = 101
                        },
                        new
                        {
                            Id = 21,
                            BathroomsAmount = 2,
                            Description = "Test apartment description 1",
                            GuestsLimit = 3,
                            PriceInUSD = 25m,
                            PriceInUserCurrency = 250m,
                            RoomsAmount = 2,
                            SuggestionId = 1
                        },
                        new
                        {
                            Id = 22,
                            BathroomsAmount = 1,
                            Description = "Test apartment description 19",
                            GuestsLimit = 4,
                            PriceInUSD = 55m,
                            PriceInUserCurrency = 550m,
                            RoomsAmount = 3,
                            SuggestionId = 19
                        },
                        new
                        {
                            Id = 23,
                            BathroomsAmount = 4,
                            Description = "Test apartment description 27",
                            GuestsLimit = 8,
                            PriceInUSD = 125m,
                            PriceInUserCurrency = 1250m,
                            RoomsAmount = 4,
                            SuggestionId = 27
                        },
                        new
                        {
                            Id = 24,
                            BathroomsAmount = 5,
                            Description = "Test apartment description 57",
                            GuestsLimit = 10,
                            PriceInUSD = 225m,
                            PriceInUserCurrency = 2250m,
                            RoomsAmount = 5,
                            SuggestionId = 57
                        },
                        new
                        {
                            Id = 25,
                            BathroomsAmount = 3,
                            Description = "Test apartment description 101",
                            GuestsLimit = 12,
                            PriceInUSD = 355m,
                            PriceInUserCurrency = 3550m,
                            RoomsAmount = 6,
                            SuggestionId = 101
                        },
                        new
                        {
                            Id = 26,
                            BathroomsAmount = 2,
                            Description = "Test apartment description 1",
                            GuestsLimit = 3,
                            PriceInUSD = 25m,
                            PriceInUserCurrency = 250m,
                            RoomsAmount = 2,
                            SuggestionId = 1
                        },
                        new
                        {
                            Id = 27,
                            BathroomsAmount = 3,
                            Description = "Test apartment description 2",
                            GuestsLimit = 5,
                            PriceInUSD = 65m,
                            PriceInUserCurrency = 650m,
                            RoomsAmount = 3,
                            SuggestionId = 15
                        },
                        new
                        {
                            Id = 28,
                            BathroomsAmount = 4,
                            Description = "Test apartment description 27",
                            GuestsLimit = 8,
                            PriceInUSD = 125m,
                            PriceInUserCurrency = 1250m,
                            RoomsAmount = 4,
                            SuggestionId = 27
                        },
                        new
                        {
                            Id = 29,
                            BathroomsAmount = 5,
                            Description = "Test apartment description 57",
                            GuestsLimit = 10,
                            PriceInUSD = 225m,
                            PriceInUserCurrency = 2250m,
                            RoomsAmount = 5,
                            SuggestionId = 57
                        },
                        new
                        {
                            Id = 30,
                            BathroomsAmount = 3,
                            Description = "Test apartment description 101",
                            GuestsLimit = 12,
                            PriceInUSD = 355m,
                            PriceInUserCurrency = 3550m,
                            RoomsAmount = 6,
                            SuggestionId = 101
                        },
                        new
                        {
                            Id = 31,
                            BathroomsAmount = 2,
                            Description = "Test apartment description 1",
                            GuestsLimit = 3,
                            PriceInUSD = 25m,
                            PriceInUserCurrency = 250m,
                            RoomsAmount = 2,
                            SuggestionId = 1
                        },
                        new
                        {
                            Id = 32,
                            BathroomsAmount = 2,
                            Description = "Test apartment description 23",
                            GuestsLimit = 3,
                            PriceInUSD = 75m,
                            PriceInUserCurrency = 750m,
                            RoomsAmount = 5,
                            SuggestionId = 23
                        },
                        new
                        {
                            Id = 33,
                            BathroomsAmount = 4,
                            Description = "Test apartment description 27",
                            GuestsLimit = 8,
                            PriceInUSD = 125m,
                            PriceInUserCurrency = 1250m,
                            RoomsAmount = 4,
                            SuggestionId = 27
                        },
                        new
                        {
                            Id = 34,
                            BathroomsAmount = 5,
                            Description = "Test apartment description 57",
                            GuestsLimit = 10,
                            PriceInUSD = 225m,
                            PriceInUserCurrency = 2250m,
                            RoomsAmount = 5,
                            SuggestionId = 57
                        },
                        new
                        {
                            Id = 35,
                            BathroomsAmount = 3,
                            Description = "Test apartment description 101",
                            GuestsLimit = 12,
                            PriceInUSD = 355m,
                            PriceInUserCurrency = 3550m,
                            RoomsAmount = 6,
                            SuggestionId = 101
                        },
                        new
                        {
                            Id = 36,
                            BathroomsAmount = 2,
                            Description = "Test apartment description 1",
                            GuestsLimit = 3,
                            PriceInUSD = 25m,
                            PriceInUserCurrency = 250m,
                            RoomsAmount = 2,
                            SuggestionId = 1
                        },
                        new
                        {
                            Id = 37,
                            BathroomsAmount = 3,
                            Description = "Test apartment description 2",
                            GuestsLimit = 5,
                            PriceInUSD = 65m,
                            PriceInUserCurrency = 650m,
                            RoomsAmount = 3,
                            SuggestionId = 15
                        },
                        new
                        {
                            Id = 38,
                            BathroomsAmount = 4,
                            Description = "Test apartment description 27",
                            GuestsLimit = 8,
                            PriceInUSD = 125m,
                            PriceInUserCurrency = 1250m,
                            RoomsAmount = 4,
                            SuggestionId = 27
                        },
                        new
                        {
                            Id = 39,
                            BathroomsAmount = 5,
                            Description = "Test apartment description 57",
                            GuestsLimit = 10,
                            PriceInUSD = 225m,
                            PriceInUserCurrency = 2250m,
                            RoomsAmount = 5,
                            SuggestionId = 57
                        },
                        new
                        {
                            Id = 40,
                            BathroomsAmount = 3,
                            Description = "Test apartment description 101",
                            GuestsLimit = 12,
                            PriceInUSD = 355m,
                            PriceInUserCurrency = 3550m,
                            RoomsAmount = 6,
                            SuggestionId = 101
                        },
                        new
                        {
                            Id = 41,
                            BathroomsAmount = 2,
                            Description = "Test apartment description 1",
                            GuestsLimit = 3,
                            PriceInUSD = 25m,
                            PriceInUserCurrency = 250m,
                            RoomsAmount = 2,
                            SuggestionId = 1
                        },
                        new
                        {
                            Id = 42,
                            BathroomsAmount = 3,
                            Description = "Test apartment description 2",
                            GuestsLimit = 5,
                            PriceInUSD = 65m,
                            PriceInUserCurrency = 650m,
                            RoomsAmount = 3,
                            SuggestionId = 15
                        },
                        new
                        {
                            Id = 43,
                            BathroomsAmount = 4,
                            Description = "Test apartment description 27",
                            GuestsLimit = 8,
                            PriceInUSD = 125m,
                            PriceInUserCurrency = 1250m,
                            RoomsAmount = 4,
                            SuggestionId = 27
                        },
                        new
                        {
                            Id = 44,
                            BathroomsAmount = 5,
                            Description = "Test apartment description 57",
                            GuestsLimit = 10,
                            PriceInUSD = 225m,
                            PriceInUserCurrency = 2250m,
                            RoomsAmount = 5,
                            SuggestionId = 57
                        },
                        new
                        {
                            Id = 45,
                            BathroomsAmount = 3,
                            Description = "Test apartment description 101",
                            GuestsLimit = 12,
                            PriceInUSD = 355m,
                            PriceInUserCurrency = 3550m,
                            RoomsAmount = 6,
                            SuggestionId = 101
                        },
                        new
                        {
                            Id = 46,
                            BathroomsAmount = 2,
                            Description = "Test apartment description 1",
                            GuestsLimit = 3,
                            PriceInUSD = 25m,
                            PriceInUserCurrency = 250m,
                            RoomsAmount = 2,
                            SuggestionId = 1
                        },
                        new
                        {
                            Id = 47,
                            BathroomsAmount = 3,
                            Description = "Test apartment description 2",
                            GuestsLimit = 5,
                            PriceInUSD = 65m,
                            PriceInUserCurrency = 650m,
                            RoomsAmount = 3,
                            SuggestionId = 15
                        },
                        new
                        {
                            Id = 48,
                            BathroomsAmount = 4,
                            Description = "Test apartment description 27",
                            GuestsLimit = 8,
                            PriceInUSD = 125m,
                            PriceInUserCurrency = 1250m,
                            RoomsAmount = 4,
                            SuggestionId = 27
                        },
                        new
                        {
                            Id = 49,
                            BathroomsAmount = 5,
                            Description = "Test apartment description 57",
                            GuestsLimit = 10,
                            PriceInUSD = 225m,
                            PriceInUserCurrency = 2250m,
                            RoomsAmount = 5,
                            SuggestionId = 57
                        },
                        new
                        {
                            Id = 50,
                            BathroomsAmount = 3,
                            Description = "Test apartment description 101",
                            GuestsLimit = 12,
                            PriceInUSD = 355m,
                            PriceInUserCurrency = 3550m,
                            RoomsAmount = 6,
                            SuggestionId = 101
                        },
                        new
                        {
                            Id = 51,
                            BathroomsAmount = 2,
                            Description = "Test apartment description 1",
                            GuestsLimit = 3,
                            PriceInUSD = 25m,
                            PriceInUserCurrency = 250m,
                            RoomsAmount = 2,
                            SuggestionId = 1
                        },
                        new
                        {
                            Id = 52,
                            BathroomsAmount = 8,
                            Description = "Test apartment description 103",
                            GuestsLimit = 5,
                            PriceInUSD = 105m,
                            PriceInUserCurrency = 1050m,
                            RoomsAmount = 5,
                            SuggestionId = 103
                        },
                        new
                        {
                            Id = 53,
                            BathroomsAmount = 4,
                            Description = "Test apartment description 27",
                            GuestsLimit = 8,
                            PriceInUSD = 125m,
                            PriceInUserCurrency = 1250m,
                            RoomsAmount = 4,
                            SuggestionId = 27
                        },
                        new
                        {
                            Id = 54,
                            BathroomsAmount = 5,
                            Description = "Test apartment description 57",
                            GuestsLimit = 10,
                            PriceInUSD = 225m,
                            PriceInUserCurrency = 2250m,
                            RoomsAmount = 5,
                            SuggestionId = 57
                        },
                        new
                        {
                            Id = 55,
                            BathroomsAmount = 3,
                            Description = "Test apartment description 101",
                            GuestsLimit = 12,
                            PriceInUSD = 355m,
                            PriceInUserCurrency = 3550m,
                            RoomsAmount = 6,
                            SuggestionId = 101
                        },
                        new
                        {
                            Id = 56,
                            BathroomsAmount = 2,
                            Description = "Test apartment description 1",
                            GuestsLimit = 3,
                            PriceInUSD = 25m,
                            PriceInUserCurrency = 250m,
                            RoomsAmount = 2,
                            SuggestionId = 1
                        },
                        new
                        {
                            Id = 57,
                            BathroomsAmount = 3,
                            Description = "Test apartment description 2",
                            GuestsLimit = 5,
                            PriceInUSD = 65m,
                            PriceInUserCurrency = 650m,
                            RoomsAmount = 3,
                            SuggestionId = 15
                        },
                        new
                        {
                            Id = 58,
                            BathroomsAmount = 4,
                            Description = "Test apartment description 27",
                            GuestsLimit = 8,
                            PriceInUSD = 125m,
                            PriceInUserCurrency = 1250m,
                            RoomsAmount = 4,
                            SuggestionId = 27
                        },
                        new
                        {
                            Id = 59,
                            BathroomsAmount = 5,
                            Description = "Test apartment description 57",
                            GuestsLimit = 10,
                            PriceInUSD = 225m,
                            PriceInUserCurrency = 2250m,
                            RoomsAmount = 5,
                            SuggestionId = 57
                        },
                        new
                        {
                            Id = 60,
                            BathroomsAmount = 3,
                            Description = "Test apartment description 101",
                            GuestsLimit = 12,
                            PriceInUSD = 355m,
                            PriceInUserCurrency = 3550m,
                            RoomsAmount = 6,
                            SuggestionId = 101
                        },
                        new
                        {
                            Id = 61,
                            BathroomsAmount = 2,
                            Description = "Test apartment description 1",
                            GuestsLimit = 3,
                            PriceInUSD = 25m,
                            PriceInUserCurrency = 250m,
                            RoomsAmount = 2,
                            SuggestionId = 1
                        },
                        new
                        {
                            Id = 62,
                            BathroomsAmount = 3,
                            Description = "Test apartment description 2",
                            GuestsLimit = 5,
                            PriceInUSD = 65m,
                            PriceInUserCurrency = 650m,
                            RoomsAmount = 3,
                            SuggestionId = 15
                        },
                        new
                        {
                            Id = 63,
                            BathroomsAmount = 4,
                            Description = "Test apartment description 27",
                            GuestsLimit = 8,
                            PriceInUSD = 125m,
                            PriceInUserCurrency = 1250m,
                            RoomsAmount = 4,
                            SuggestionId = 27
                        },
                        new
                        {
                            Id = 64,
                            BathroomsAmount = 5,
                            Description = "Test apartment description 57",
                            GuestsLimit = 10,
                            PriceInUSD = 225m,
                            PriceInUserCurrency = 2250m,
                            RoomsAmount = 5,
                            SuggestionId = 57
                        },
                        new
                        {
                            Id = 65,
                            BathroomsAmount = 1,
                            Description = "Test apartment description 97",
                            GuestsLimit = 2,
                            PriceInUSD = 40m,
                            PriceInUserCurrency = 400m,
                            RoomsAmount = 2,
                            SuggestionId = 97
                        },
                        new
                        {
                            Id = 66,
                            BathroomsAmount = 2,
                            Description = "Test apartment description 1",
                            GuestsLimit = 3,
                            PriceInUSD = 25m,
                            PriceInUserCurrency = 250m,
                            RoomsAmount = 2,
                            SuggestionId = 1
                        },
                        new
                        {
                            Id = 67,
                            BathroomsAmount = 3,
                            Description = "Test apartment description 2",
                            GuestsLimit = 5,
                            PriceInUSD = 65m,
                            PriceInUserCurrency = 650m,
                            RoomsAmount = 3,
                            SuggestionId = 15
                        },
                        new
                        {
                            Id = 68,
                            BathroomsAmount = 4,
                            Description = "Test apartment description 27",
                            GuestsLimit = 8,
                            PriceInUSD = 125m,
                            PriceInUserCurrency = 1250m,
                            RoomsAmount = 4,
                            SuggestionId = 27
                        },
                        new
                        {
                            Id = 69,
                            BathroomsAmount = 5,
                            Description = "Test apartment description 57",
                            GuestsLimit = 10,
                            PriceInUSD = 225m,
                            PriceInUserCurrency = 2250m,
                            RoomsAmount = 5,
                            SuggestionId = 57
                        },
                        new
                        {
                            Id = 70,
                            BathroomsAmount = 3,
                            Description = "Test apartment description 101",
                            GuestsLimit = 12,
                            PriceInUSD = 355m,
                            PriceInUserCurrency = 3550m,
                            RoomsAmount = 6,
                            SuggestionId = 101
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Database.Models.Suggestions.Bed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("BedTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BedTypeId");

                    b.ToTable("Beds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 0,
                            BedTypeId = 1,
                            Description = "test1"
                        },
                        new
                        {
                            Id = 2,
                            Amount = 0,
                            BedTypeId = 2,
                            Description = "test2"
                        },
                        new
                        {
                            Id = 3,
                            Amount = 0,
                            BedTypeId = 3,
                            Description = "test3"
                        },
                        new
                        {
                            Id = 4,
                            Amount = 0,
                            BedTypeId = 4,
                            Description = "test4"
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Database.Models.Suggestions.BedType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BedTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Twin beds"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Queen bed"
                        },
                        new
                        {
                            Id = 3,
                            Title = "King bed"
                        },
                        new
                        {
                            Id = 4,
                            Title = "Single bed"
                        },
                        new
                        {
                            Id = 5,
                            Title = "Double bed"
                        },
                        new
                        {
                            Id = 6,
                            Title = "Large bed"
                        },
                        new
                        {
                            Id = 7,
                            Title = "Extra-large double bed"
                        },
                        new
                        {
                            Id = 8,
                            Title = "Bunk bed"
                        },
                        new
                        {
                            Id = 9,
                            Title = "Sofa bed"
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Database.Models.Suggestions.BookedPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOut")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BookedDates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateIn = new DateTime(2022, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOut = new DateTime(2022, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            DateIn = new DateTime(2022, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOut = new DateTime(2022, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            DateIn = new DateTime(2022, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOut = new DateTime(2022, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            DateIn = new DateTime(2022, 4, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOut = new DateTime(2022, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            DateIn = new DateTime(2022, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOut = new DateTime(2022, 5, 29, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            DateIn = new DateTime(2022, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOut = new DateTime(2022, 5, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            DateIn = new DateTime(2022, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOut = new DateTime(2022, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            DateIn = new DateTime(2022, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOut = new DateTime(2022, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            DateIn = new DateTime(2022, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOut = new DateTime(2022, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            DateIn = new DateTime(2022, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOut = new DateTime(2022, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            DateIn = new DateTime(2022, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOut = new DateTime(2022, 9, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            DateIn = new DateTime(2022, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOut = new DateTime(2022, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            DateIn = new DateTime(2022, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOut = new DateTime(2022, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            DateIn = new DateTime(2022, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOut = new DateTime(2022, 9, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            DateIn = new DateTime(2022, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOut = new DateTime(2022, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16,
                            DateIn = new DateTime(2022, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOut = new DateTime(2022, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 17,
                            DateIn = new DateTime(2022, 11, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOut = new DateTime(2022, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 18,
                            DateIn = new DateTime(2022, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOut = new DateTime(2022, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 19,
                            DateIn = new DateTime(2022, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOut = new DateTime(2022, 12, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 20,
                            DateIn = new DateTime(2022, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOut = new DateTime(2022, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 21,
                            DateIn = new DateTime(2023, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOut = new DateTime(2023, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 22,
                            DateIn = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOut = new DateTime(2023, 9, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 23,
                            DateIn = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOut = new DateTime(2023, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 24,
                            DateIn = new DateTime(2023, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOut = new DateTime(2023, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 25,
                            DateIn = new DateTime(2023, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOut = new DateTime(2023, 9, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 26,
                            DateIn = new DateTime(2023, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOut = new DateTime(2023, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 27,
                            DateIn = new DateTime(2023, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOut = new DateTime(2023, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 28,
                            DateIn = new DateTime(2023, 11, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOut = new DateTime(2023, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 29,
                            DateIn = new DateTime(2023, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOut = new DateTime(2023, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 30,
                            DateIn = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOut = new DateTime(2023, 12, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Database.Models.Suggestions.ContactDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("SuggestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SuggestionId")
                        .IsUnique();

                    b.ToTable("ContactDetails");
                });

            modelBuilder.Entity("CloneBookingAPI.Database.Models.ViewModels.ApartmentBookedPeriod", b =>
                {
                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<int>("BookedPeriodId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("ApartmentId", "BookedPeriodId");

                    b.HasIndex("BookedPeriodId");

                    b.ToTable("ApartmentsBookedPeriods");

                    b.HasData(
                        new
                        {
                            ApartmentId = 1,
                            BookedPeriodId = 1,
                            Id = 1
                        },
                        new
                        {
                            ApartmentId = 2,
                            BookedPeriodId = 2,
                            Id = 2
                        },
                        new
                        {
                            ApartmentId = 3,
                            BookedPeriodId = 3,
                            Id = 3
                        },
                        new
                        {
                            ApartmentId = 4,
                            BookedPeriodId = 4,
                            Id = 4
                        },
                        new
                        {
                            ApartmentId = 5,
                            BookedPeriodId = 5,
                            Id = 5
                        },
                        new
                        {
                            ApartmentId = 6,
                            BookedPeriodId = 6,
                            Id = 6
                        },
                        new
                        {
                            ApartmentId = 7,
                            BookedPeriodId = 7,
                            Id = 7
                        },
                        new
                        {
                            ApartmentId = 8,
                            BookedPeriodId = 8,
                            Id = 8
                        },
                        new
                        {
                            ApartmentId = 9,
                            BookedPeriodId = 9,
                            Id = 9
                        },
                        new
                        {
                            ApartmentId = 10,
                            BookedPeriodId = 10,
                            Id = 10
                        },
                        new
                        {
                            ApartmentId = 11,
                            BookedPeriodId = 11,
                            Id = 11
                        },
                        new
                        {
                            ApartmentId = 12,
                            BookedPeriodId = 12,
                            Id = 12
                        },
                        new
                        {
                            ApartmentId = 13,
                            BookedPeriodId = 13,
                            Id = 13
                        },
                        new
                        {
                            ApartmentId = 14,
                            BookedPeriodId = 14,
                            Id = 14
                        },
                        new
                        {
                            ApartmentId = 15,
                            BookedPeriodId = 15,
                            Id = 15
                        },
                        new
                        {
                            ApartmentId = 16,
                            BookedPeriodId = 16,
                            Id = 16
                        },
                        new
                        {
                            ApartmentId = 17,
                            BookedPeriodId = 17,
                            Id = 17
                        },
                        new
                        {
                            ApartmentId = 18,
                            BookedPeriodId = 18,
                            Id = 18
                        },
                        new
                        {
                            ApartmentId = 19,
                            BookedPeriodId = 19,
                            Id = 19
                        },
                        new
                        {
                            ApartmentId = 20,
                            BookedPeriodId = 20,
                            Id = 20
                        },
                        new
                        {
                            ApartmentId = 21,
                            BookedPeriodId = 21,
                            Id = 21
                        },
                        new
                        {
                            ApartmentId = 22,
                            BookedPeriodId = 22,
                            Id = 22
                        },
                        new
                        {
                            ApartmentId = 23,
                            BookedPeriodId = 23,
                            Id = 23
                        },
                        new
                        {
                            ApartmentId = 24,
                            BookedPeriodId = 24,
                            Id = 24
                        },
                        new
                        {
                            ApartmentId = 25,
                            BookedPeriodId = 25,
                            Id = 25
                        },
                        new
                        {
                            ApartmentId = 26,
                            BookedPeriodId = 26,
                            Id = 26
                        },
                        new
                        {
                            ApartmentId = 27,
                            BookedPeriodId = 27,
                            Id = 27
                        },
                        new
                        {
                            ApartmentId = 28,
                            BookedPeriodId = 28,
                            Id = 28
                        },
                        new
                        {
                            ApartmentId = 29,
                            BookedPeriodId = 29,
                            Id = 29
                        },
                        new
                        {
                            ApartmentId = 30,
                            BookedPeriodId = 30,
                            Id = 30
                        },
                        new
                        {
                            ApartmentId = 31,
                            BookedPeriodId = 1,
                            Id = 31
                        },
                        new
                        {
                            ApartmentId = 32,
                            BookedPeriodId = 2,
                            Id = 32
                        },
                        new
                        {
                            ApartmentId = 33,
                            BookedPeriodId = 3,
                            Id = 33
                        },
                        new
                        {
                            ApartmentId = 34,
                            BookedPeriodId = 4,
                            Id = 34
                        },
                        new
                        {
                            ApartmentId = 35,
                            BookedPeriodId = 5,
                            Id = 35
                        },
                        new
                        {
                            ApartmentId = 36,
                            BookedPeriodId = 6,
                            Id = 36
                        },
                        new
                        {
                            ApartmentId = 37,
                            BookedPeriodId = 7,
                            Id = 37
                        },
                        new
                        {
                            ApartmentId = 38,
                            BookedPeriodId = 8,
                            Id = 38
                        },
                        new
                        {
                            ApartmentId = 39,
                            BookedPeriodId = 9,
                            Id = 39
                        },
                        new
                        {
                            ApartmentId = 40,
                            BookedPeriodId = 10,
                            Id = 40
                        },
                        new
                        {
                            ApartmentId = 41,
                            BookedPeriodId = 11,
                            Id = 41
                        },
                        new
                        {
                            ApartmentId = 42,
                            BookedPeriodId = 12,
                            Id = 42
                        },
                        new
                        {
                            ApartmentId = 43,
                            BookedPeriodId = 13,
                            Id = 43
                        },
                        new
                        {
                            ApartmentId = 44,
                            BookedPeriodId = 14,
                            Id = 44
                        },
                        new
                        {
                            ApartmentId = 45,
                            BookedPeriodId = 15,
                            Id = 45
                        },
                        new
                        {
                            ApartmentId = 46,
                            BookedPeriodId = 16,
                            Id = 46
                        },
                        new
                        {
                            ApartmentId = 47,
                            BookedPeriodId = 17,
                            Id = 47
                        },
                        new
                        {
                            ApartmentId = 48,
                            BookedPeriodId = 18,
                            Id = 48
                        },
                        new
                        {
                            ApartmentId = 49,
                            BookedPeriodId = 19,
                            Id = 49
                        },
                        new
                        {
                            ApartmentId = 50,
                            BookedPeriodId = 20,
                            Id = 50
                        },
                        new
                        {
                            ApartmentId = 51,
                            BookedPeriodId = 21,
                            Id = 51
                        },
                        new
                        {
                            ApartmentId = 52,
                            BookedPeriodId = 22,
                            Id = 52
                        },
                        new
                        {
                            ApartmentId = 53,
                            BookedPeriodId = 23,
                            Id = 53
                        },
                        new
                        {
                            ApartmentId = 54,
                            BookedPeriodId = 24,
                            Id = 54
                        },
                        new
                        {
                            ApartmentId = 55,
                            BookedPeriodId = 25,
                            Id = 55
                        },
                        new
                        {
                            ApartmentId = 56,
                            BookedPeriodId = 26,
                            Id = 56
                        },
                        new
                        {
                            ApartmentId = 57,
                            BookedPeriodId = 27,
                            Id = 57
                        },
                        new
                        {
                            ApartmentId = 58,
                            BookedPeriodId = 28,
                            Id = 58
                        },
                        new
                        {
                            ApartmentId = 59,
                            BookedPeriodId = 29,
                            Id = 59
                        },
                        new
                        {
                            ApartmentId = 60,
                            BookedPeriodId = 30,
                            Id = 60
                        },
                        new
                        {
                            ApartmentId = 61,
                            BookedPeriodId = 1,
                            Id = 61
                        },
                        new
                        {
                            ApartmentId = 62,
                            BookedPeriodId = 2,
                            Id = 62
                        },
                        new
                        {
                            ApartmentId = 63,
                            BookedPeriodId = 3,
                            Id = 63
                        },
                        new
                        {
                            ApartmentId = 64,
                            BookedPeriodId = 4,
                            Id = 64
                        },
                        new
                        {
                            ApartmentId = 65,
                            BookedPeriodId = 5,
                            Id = 65
                        },
                        new
                        {
                            ApartmentId = 66,
                            BookedPeriodId = 6,
                            Id = 66
                        },
                        new
                        {
                            ApartmentId = 67,
                            BookedPeriodId = 7,
                            Id = 67
                        },
                        new
                        {
                            ApartmentId = 68,
                            BookedPeriodId = 8,
                            Id = 68
                        },
                        new
                        {
                            ApartmentId = 69,
                            BookedPeriodId = 9,
                            Id = 69
                        },
                        new
                        {
                            ApartmentId = 70,
                            BookedPeriodId = 10,
                            Id = 70
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Database.Models.ViewModels.ApartmentRoomType", b =>
                {
                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("ApartmentId", "RoomTypeId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("ApartmentsRoomTypes");

                    b.HasData(
                        new
                        {
                            ApartmentId = 1,
                            RoomTypeId = 1,
                            Id = 1
                        },
                        new
                        {
                            ApartmentId = 2,
                            RoomTypeId = 2,
                            Id = 2
                        },
                        new
                        {
                            ApartmentId = 3,
                            RoomTypeId = 3,
                            Id = 3
                        },
                        new
                        {
                            ApartmentId = 4,
                            RoomTypeId = 4,
                            Id = 4
                        },
                        new
                        {
                            ApartmentId = 5,
                            RoomTypeId = 5,
                            Id = 5
                        },
                        new
                        {
                            ApartmentId = 6,
                            RoomTypeId = 6,
                            Id = 6
                        },
                        new
                        {
                            ApartmentId = 7,
                            RoomTypeId = 7,
                            Id = 7
                        },
                        new
                        {
                            ApartmentId = 8,
                            RoomTypeId = 8,
                            Id = 8
                        },
                        new
                        {
                            ApartmentId = 9,
                            RoomTypeId = 9,
                            Id = 9
                        },
                        new
                        {
                            ApartmentId = 10,
                            RoomTypeId = 10,
                            Id = 10
                        },
                        new
                        {
                            ApartmentId = 11,
                            RoomTypeId = 11,
                            Id = 11
                        },
                        new
                        {
                            ApartmentId = 12,
                            RoomTypeId = 12,
                            Id = 12
                        },
                        new
                        {
                            ApartmentId = 13,
                            RoomTypeId = 13,
                            Id = 13
                        },
                        new
                        {
                            ApartmentId = 14,
                            RoomTypeId = 1,
                            Id = 14
                        },
                        new
                        {
                            ApartmentId = 15,
                            RoomTypeId = 2,
                            Id = 15
                        },
                        new
                        {
                            ApartmentId = 16,
                            RoomTypeId = 3,
                            Id = 16
                        },
                        new
                        {
                            ApartmentId = 17,
                            RoomTypeId = 4,
                            Id = 17
                        },
                        new
                        {
                            ApartmentId = 18,
                            RoomTypeId = 5,
                            Id = 18
                        },
                        new
                        {
                            ApartmentId = 19,
                            RoomTypeId = 6,
                            Id = 19
                        },
                        new
                        {
                            ApartmentId = 20,
                            RoomTypeId = 7,
                            Id = 20
                        },
                        new
                        {
                            ApartmentId = 21,
                            RoomTypeId = 8,
                            Id = 21
                        },
                        new
                        {
                            ApartmentId = 22,
                            RoomTypeId = 9,
                            Id = 22
                        },
                        new
                        {
                            ApartmentId = 23,
                            RoomTypeId = 10,
                            Id = 23
                        },
                        new
                        {
                            ApartmentId = 24,
                            RoomTypeId = 11,
                            Id = 24
                        },
                        new
                        {
                            ApartmentId = 25,
                            RoomTypeId = 12,
                            Id = 25
                        },
                        new
                        {
                            ApartmentId = 26,
                            RoomTypeId = 13,
                            Id = 26
                        },
                        new
                        {
                            ApartmentId = 27,
                            RoomTypeId = 1,
                            Id = 27
                        },
                        new
                        {
                            ApartmentId = 28,
                            RoomTypeId = 2,
                            Id = 28
                        },
                        new
                        {
                            ApartmentId = 29,
                            RoomTypeId = 3,
                            Id = 29
                        },
                        new
                        {
                            ApartmentId = 30,
                            RoomTypeId = 4,
                            Id = 30
                        },
                        new
                        {
                            ApartmentId = 31,
                            RoomTypeId = 5,
                            Id = 31
                        },
                        new
                        {
                            ApartmentId = 32,
                            RoomTypeId = 6,
                            Id = 32
                        },
                        new
                        {
                            ApartmentId = 33,
                            RoomTypeId = 7,
                            Id = 33
                        },
                        new
                        {
                            ApartmentId = 34,
                            RoomTypeId = 8,
                            Id = 34
                        },
                        new
                        {
                            ApartmentId = 35,
                            RoomTypeId = 9,
                            Id = 35
                        },
                        new
                        {
                            ApartmentId = 36,
                            RoomTypeId = 10,
                            Id = 36
                        },
                        new
                        {
                            ApartmentId = 37,
                            RoomTypeId = 11,
                            Id = 37
                        },
                        new
                        {
                            ApartmentId = 38,
                            RoomTypeId = 12,
                            Id = 38
                        },
                        new
                        {
                            ApartmentId = 39,
                            RoomTypeId = 13,
                            Id = 39
                        },
                        new
                        {
                            ApartmentId = 40,
                            RoomTypeId = 1,
                            Id = 40
                        },
                        new
                        {
                            ApartmentId = 41,
                            RoomTypeId = 2,
                            Id = 41
                        },
                        new
                        {
                            ApartmentId = 42,
                            RoomTypeId = 3,
                            Id = 42
                        },
                        new
                        {
                            ApartmentId = 43,
                            RoomTypeId = 4,
                            Id = 43
                        },
                        new
                        {
                            ApartmentId = 44,
                            RoomTypeId = 5,
                            Id = 44
                        },
                        new
                        {
                            ApartmentId = 45,
                            RoomTypeId = 6,
                            Id = 45
                        },
                        new
                        {
                            ApartmentId = 46,
                            RoomTypeId = 7,
                            Id = 46
                        },
                        new
                        {
                            ApartmentId = 47,
                            RoomTypeId = 8,
                            Id = 47
                        },
                        new
                        {
                            ApartmentId = 48,
                            RoomTypeId = 9,
                            Id = 48
                        },
                        new
                        {
                            ApartmentId = 49,
                            RoomTypeId = 10,
                            Id = 49
                        },
                        new
                        {
                            ApartmentId = 50,
                            RoomTypeId = 11,
                            Id = 50
                        },
                        new
                        {
                            ApartmentId = 51,
                            RoomTypeId = 12,
                            Id = 51
                        },
                        new
                        {
                            ApartmentId = 52,
                            RoomTypeId = 13,
                            Id = 52
                        },
                        new
                        {
                            ApartmentId = 53,
                            RoomTypeId = 1,
                            Id = 53
                        },
                        new
                        {
                            ApartmentId = 54,
                            RoomTypeId = 2,
                            Id = 54
                        },
                        new
                        {
                            ApartmentId = 55,
                            RoomTypeId = 3,
                            Id = 55
                        },
                        new
                        {
                            ApartmentId = 56,
                            RoomTypeId = 4,
                            Id = 56
                        },
                        new
                        {
                            ApartmentId = 57,
                            RoomTypeId = 5,
                            Id = 57
                        },
                        new
                        {
                            ApartmentId = 58,
                            RoomTypeId = 6,
                            Id = 58
                        },
                        new
                        {
                            ApartmentId = 59,
                            RoomTypeId = 7,
                            Id = 59
                        },
                        new
                        {
                            ApartmentId = 60,
                            RoomTypeId = 8,
                            Id = 60
                        },
                        new
                        {
                            ApartmentId = 61,
                            RoomTypeId = 9,
                            Id = 61
                        },
                        new
                        {
                            ApartmentId = 62,
                            RoomTypeId = 10,
                            Id = 62
                        },
                        new
                        {
                            ApartmentId = 63,
                            RoomTypeId = 11,
                            Id = 63
                        },
                        new
                        {
                            ApartmentId = 64,
                            RoomTypeId = 12,
                            Id = 64
                        },
                        new
                        {
                            ApartmentId = 65,
                            RoomTypeId = 13,
                            Id = 65
                        },
                        new
                        {
                            ApartmentId = 66,
                            RoomTypeId = 1,
                            Id = 66
                        },
                        new
                        {
                            ApartmentId = 67,
                            RoomTypeId = 2,
                            Id = 67
                        },
                        new
                        {
                            ApartmentId = 68,
                            RoomTypeId = 3,
                            Id = 68
                        },
                        new
                        {
                            ApartmentId = 69,
                            RoomTypeId = 4,
                            Id = 69
                        },
                        new
                        {
                            ApartmentId = 70,
                            RoomTypeId = 5,
                            Id = 70
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Database.Models.ViewModels.SuggestionFileModel", b =>
                {
                    b.Property<int>("SuggestionId")
                        .HasColumnType("int");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("SuggestionId", "ImageId");

                    b.HasIndex("ImageId");

                    b.ToTable("SuggestionsFileModels");

                    b.HasData(
                        new
                        {
                            SuggestionId = 1,
                            ImageId = 24,
                            Id = 1
                        },
                        new
                        {
                            SuggestionId = 7,
                            ImageId = 25,
                            Id = 2
                        },
                        new
                        {
                            SuggestionId = 11,
                            ImageId = 26,
                            Id = 3
                        },
                        new
                        {
                            SuggestionId = 15,
                            ImageId = 27,
                            Id = 4
                        },
                        new
                        {
                            SuggestionId = 33,
                            ImageId = 28,
                            Id = 5
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Configurations.Review.ReviewMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ReviewMessages");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.AreaInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AreaInfoTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AreaInfoTypeId");

                    b.ToTable("AreaInfos");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.AreaInfoType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AreaInfoTypes");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.BookingCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("BookingCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Hotels",
                            ImageId = 17
                        },
                        new
                        {
                            Id = 2,
                            Category = "Apartments",
                            ImageId = 18
                        },
                        new
                        {
                            Id = 3,
                            Category = "Resorts",
                            ImageId = 19
                        },
                        new
                        {
                            Id = 4,
                            Category = "Villas",
                            ImageId = 20
                        },
                        new
                        {
                            Id = 5,
                            Category = "Hostels",
                            ImageId = 21
                        },
                        new
                        {
                            Id = 6,
                            Category = "B&Bs",
                            ImageId = 22
                        },
                        new
                        {
                            Id = 7,
                            Category = "Guest Houses",
                            ImageId = 23
                        },
                        new
                        {
                            Id = 8,
                            Category = "Vacation Homes",
                            ImageId = 24
                        },
                        new
                        {
                            Id = 9,
                            Category = "Serviced Apartments",
                            ImageId = 25
                        },
                        new
                        {
                            Id = 10,
                            Category = "Glamping",
                            ImageId = 26
                        },
                        new
                        {
                            Id = 11,
                            Category = "Cottages",
                            ImageId = 27
                        },
                        new
                        {
                            Id = 12,
                            Category = "Cabins",
                            ImageId = 28
                        },
                        new
                        {
                            Id = 13,
                            Category = "Motels",
                            ImageId = 29
                        },
                        new
                        {
                            Id = 14,
                            Category = "Ryokans",
                            ImageId = 30
                        },
                        new
                        {
                            Id = 15,
                            Category = "Riads",
                            ImageId = 31
                        },
                        new
                        {
                            Id = 16,
                            Category = "Resort Villages",
                            ImageId = 32
                        },
                        new
                        {
                            Id = 17,
                            Category = "Homestays",
                            ImageId = 33
                        },
                        new
                        {
                            Id = 18,
                            Category = "Campgrounds",
                            ImageId = 34
                        },
                        new
                        {
                            Id = 19,
                            Category = "Country Houses",
                            ImageId = 35
                        },
                        new
                        {
                            Id = 20,
                            Category = "Farm Stays",
                            ImageId = 36
                        },
                        new
                        {
                            Id = 21,
                            Category = "Boats",
                            ImageId = 37
                        },
                        new
                        {
                            Id = 22,
                            Category = "Luxury Tents",
                            ImageId = 38
                        },
                        new
                        {
                            Id = 23,
                            Category = "Selfcatering Accommodation",
                            ImageId = 39
                        },
                        new
                        {
                            Id = 24,
                            Category = "Tiny Houses",
                            ImageId = 40
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.CardType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CardTypes");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("BankCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "USD",
                            BankCode = "$",
                            Value = "USA Dollar"
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "EUR",
                            BankCode = "€",
                            Value = "Euro"
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "RUB",
                            BankCode = "₽",
                            Value = "Рубль"
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("FacilityTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FacilityTypeId");

                    b.HasIndex("ImageId");

                    b.ToTable("Facilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FacilityTypeId = 2,
                            ImageId = 1,
                            Text = "Beachfront"
                        },
                        new
                        {
                            Id = 2,
                            FacilityTypeId = 2,
                            ImageId = 1,
                            Text = "Private beach area"
                        },
                        new
                        {
                            Id = 3,
                            FacilityTypeId = 2,
                            ImageId = 1,
                            Text = "Terrace"
                        },
                        new
                        {
                            Id = 4,
                            FacilityTypeId = 2,
                            ImageId = 1,
                            Text = "Garden"
                        },
                        new
                        {
                            Id = 5,
                            FacilityTypeId = 3,
                            ImageId = 1,
                            Text = "Babysitting/Child services"
                        },
                        new
                        {
                            Id = 6,
                            FacilityTypeId = 4,
                            ImageId = 1,
                            Text = "Open all year"
                        },
                        new
                        {
                            Id = 7,
                            FacilityTypeId = 4,
                            ImageId = 1,
                            Text = "All ages welcome"
                        },
                        new
                        {
                            Id = 8,
                            FacilityTypeId = 5,
                            ImageId = 1,
                            Text = "Beach"
                        },
                        new
                        {
                            Id = 9,
                            FacilityTypeId = 5,
                            ImageId = 1,
                            Text = "Kids' club"
                        },
                        new
                        {
                            Id = 10,
                            FacilityTypeId = 5,
                            ImageId = 1,
                            Text = "Snorkeling"
                        },
                        new
                        {
                            Id = 11,
                            FacilityTypeId = 5,
                            ImageId = 1,
                            Text = "Diving"
                        },
                        new
                        {
                            Id = 12,
                            FacilityTypeId = 5,
                            ImageId = 1,
                            Text = "Playground"
                        },
                        new
                        {
                            Id = 13,
                            FacilityTypeId = 5,
                            ImageId = 1,
                            Text = "Game room"
                        },
                        new
                        {
                            Id = 14,
                            FacilityTypeId = 6,
                            ImageId = 1,
                            Text = "Daily housekeeping"
                        },
                        new
                        {
                            Id = 15,
                            FacilityTypeId = 6,
                            ImageId = 1,
                            Text = "Ironing service"
                        },
                        new
                        {
                            Id = 16,
                            FacilityTypeId = 6,
                            ImageId = 1,
                            Text = "Dry cleaning"
                        },
                        new
                        {
                            Id = 17,
                            FacilityTypeId = 6,
                            ImageId = 1,
                            Text = "Laundry"
                        },
                        new
                        {
                            Id = 18,
                            FacilityTypeId = 7,
                            ImageId = 1,
                            Text = "Fitness"
                        },
                        new
                        {
                            Id = 19,
                            FacilityTypeId = 7,
                            ImageId = 1,
                            Text = "Spa facilities"
                        },
                        new
                        {
                            Id = 20,
                            FacilityTypeId = 7,
                            ImageId = 1,
                            Text = "Beach umbrellas"
                        },
                        new
                        {
                            Id = 21,
                            FacilityTypeId = 7,
                            ImageId = 1,
                            Text = "Turkish/Steam Bath"
                        },
                        new
                        {
                            Id = 22,
                            FacilityTypeId = 7,
                            ImageId = 1,
                            Text = "Massage"
                        },
                        new
                        {
                            Id = 23,
                            FacilityTypeId = 7,
                            ImageId = 1,
                            Text = "Spa"
                        },
                        new
                        {
                            Id = 24,
                            FacilityTypeId = 7,
                            ImageId = 1,
                            Text = "Fitness center"
                        },
                        new
                        {
                            Id = 25,
                            FacilityTypeId = 7,
                            ImageId = 1,
                            Text = "Sauna"
                        },
                        new
                        {
                            Id = 26,
                            FacilityTypeId = 8,
                            ImageId = 1,
                            Text = "Fax/Photocopying"
                        },
                        new
                        {
                            Id = 27,
                            FacilityTypeId = 8,
                            ImageId = 1,
                            Text = "Meeting/Banquet facilities"
                        },
                        new
                        {
                            Id = 28,
                            FacilityTypeId = 9,
                            ImageId = 1,
                            Text = "Smoke alarms"
                        },
                        new
                        {
                            Id = 29,
                            FacilityTypeId = 9,
                            ImageId = 1,
                            Text = "24-hour security"
                        },
                        new
                        {
                            Id = 30,
                            FacilityTypeId = 9,
                            ImageId = 1,
                            Text = "Safe"
                        },
                        new
                        {
                            Id = 31,
                            FacilityTypeId = 10,
                            ImageId = 1,
                            Text = "Breakfast in the room"
                        },
                        new
                        {
                            Id = 32,
                            FacilityTypeId = 10,
                            ImageId = 1,
                            Text = "Bar"
                        },
                        new
                        {
                            Id = 36,
                            FacilityTypeId = 12,
                            ImageId = 1,
                            Text = "Free public parking is available on site."
                        },
                        new
                        {
                            Id = 37,
                            FacilityTypeId = 12,
                            ImageId = 1,
                            Text = "Street parking"
                        },
                        new
                        {
                            Id = 38,
                            FacilityTypeId = 13,
                            ImageId = 1,
                            Text = "WiFi is available in all areas and is free of charge."
                        },
                        new
                        {
                            Id = 39,
                            FacilityTypeId = 13,
                            ImageId = 1,
                            Text = "Restaurant"
                        },
                        new
                        {
                            Id = 41,
                            FacilityTypeId = 14,
                            ImageId = 1,
                            Text = "Baggage storage"
                        },
                        new
                        {
                            Id = 42,
                            FacilityTypeId = 14,
                            ImageId = 1,
                            Text = "Tour desk"
                        },
                        new
                        {
                            Id = 43,
                            FacilityTypeId = 14,
                            ImageId = 1,
                            Text = "Currency exchange"
                        },
                        new
                        {
                            Id = 44,
                            FacilityTypeId = 14,
                            ImageId = 1,
                            Text = "24-hour front desk"
                        },
                        new
                        {
                            Id = 45,
                            FacilityTypeId = 15,
                            ImageId = 1,
                            Text = "Designated smoking area"
                        },
                        new
                        {
                            Id = 46,
                            FacilityTypeId = 15,
                            ImageId = 1,
                            Text = "Air conditioning"
                        },
                        new
                        {
                            Id = 47,
                            FacilityTypeId = 15,
                            ImageId = 1,
                            Text = "Heating"
                        },
                        new
                        {
                            Id = 48,
                            FacilityTypeId = 15,
                            ImageId = 1,
                            Text = "Chapel/Shrine"
                        },
                        new
                        {
                            Id = 49,
                            FacilityTypeId = 15,
                            ImageId = 1,
                            Text = "Elevator"
                        },
                        new
                        {
                            Id = 50,
                            FacilityTypeId = 15,
                            ImageId = 1,
                            Text = "Family rooms"
                        },
                        new
                        {
                            Id = 51,
                            FacilityTypeId = 15,
                            ImageId = 1,
                            Text = "Facilities for disabled guests"
                        },
                        new
                        {
                            Id = 52,
                            FacilityTypeId = 15,
                            ImageId = 1,
                            Text = "Non-smoking rooms"
                        },
                        new
                        {
                            Id = 53,
                            FacilityTypeId = 15,
                            ImageId = 1,
                            Text = "Room service"
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.FacilityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("FacilityTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Most popular facilities"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Outdoors"
                        },
                        new
                        {
                            Id = 3,
                            Type = "Entertainment & Family Services"
                        },
                        new
                        {
                            Id = 4,
                            Type = "Outdoor swimming pool"
                        },
                        new
                        {
                            Id = 5,
                            Type = "Activities"
                        },
                        new
                        {
                            Id = 6,
                            Type = "Cleaning Services"
                        },
                        new
                        {
                            Id = 7,
                            Type = "Spa"
                        },
                        new
                        {
                            Id = 8,
                            Type = "Business Facilities"
                        },
                        new
                        {
                            Id = 9,
                            Type = "Safety & security"
                        },
                        new
                        {
                            Id = 10,
                            Type = "Food & Drink"
                        },
                        new
                        {
                            Id = 11,
                            Type = "Languages Spoken"
                        },
                        new
                        {
                            Id = 12,
                            Type = "Parking"
                        },
                        new
                        {
                            Id = 13,
                            Type = "Internet"
                        },
                        new
                        {
                            Id = 14,
                            Type = "Front Desk Services"
                        },
                        new
                        {
                            Id = 15,
                            Type = "General"
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.FileModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Files");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "YSJu1Nj3YEKYuc+MC4TSlRWPvtybYtnfFT6dHXPt5k=.png",
                            Path = "/files/YSJu1Nj3YEKYuc+MC4TSlRWPvtybYtnfFT6dHXPt5k=.png"
                        },
                        new
                        {
                            Id = 2,
                            Name = "N6TTPt7raEBYeOcLAFMjL1mWb5ip+Kt9YXHddBJ5+A=.png",
                            Path = "/files/N6TTPt7raEBYeOcLAFMjL1mWb5ip+Kt9YXHddBJ5+A=.png"
                        },
                        new
                        {
                            Id = 3,
                            Name = "AyFnP96S870Z5dpsREvobcCqkk9WxRqZaqrlwDD+aU=.png",
                            Path = "/files/AyFnP96S870Z5dpsREvobcCqkk9WxRqZaqrlwDD+aU=.png"
                        },
                        new
                        {
                            Id = 4,
                            Name = "PMPvpvziKwjaiBm+NJOnumepEhpdkEpmwZX+y8uGxM=.png",
                            Path = "/files/PMPvpvziKwjaiBm+NJOnumepEhpdkEpmwZX+y8uGxM=.png"
                        },
                        new
                        {
                            Id = 5,
                            Name = "JonaGiXS6Fy5vFAhFXV6yi4gF0QAjlGfAKt1tLfNH4=.png",
                            Path = "/files/JonaGiXS6Fy5vFAhFXV6yi4gF0QAjlGfAKt1tLfNH4=.png"
                        },
                        new
                        {
                            Id = 6,
                            Name = "hunLamNewdFFiIJuD2jTaHhnD62OU2EwqFp4lao+qNY=.png",
                            Path = "/files/hunLamNewdFFiIJuD2jTaHhnD62OU2EwqFp4lao+qNY=.png"
                        },
                        new
                        {
                            Id = 7,
                            Name = "U4h32cGZhMmt59xHBhyIkx+2qJ6x2cs+23U9c94ugcc=.png",
                            Path = "/files/U4h32cGZhMmt59xHBhyIkx+2qJ6x2cs+23U9c94ugcc=.png"
                        },
                        new
                        {
                            Id = 8,
                            Name = "89NTq1CzGc3AnN8+m2RNyIzkfP33nOm96VYeeoJmbBQ=.png",
                            Path = "/files/89NTq1CzGc3AnN8+m2RNyIzkfP33nOm96VYeeoJmbBQ=.png"
                        },
                        new
                        {
                            Id = 9,
                            Name = "H8v3dNgasrnuIthKRth17pFIb+3bfi7j09YDODmk4l4=.png",
                            Path = "/files/H8v3dNgasrnuIthKRth17pFIb+3bfi7j09YDODmk4l4=.png"
                        },
                        new
                        {
                            Id = 10,
                            Name = "pBWV7R2w3omzP+Kv5PxT627LiqV3evixcVyN4B9NovI=.png",
                            Path = "/files/pBWV7R2w3omzP+Kv5PxT627LiqV3evixcVyN4B9NovI=.png"
                        },
                        new
                        {
                            Id = 11,
                            Name = "9FXre4iyTJ6PR2kItwfneUxvLFxi8bN402K2VcsZ4dE=.png",
                            Path = "/files/9FXre4iyTJ6PR2kItwfneUxvLFxi8bN402K2VcsZ4dE=.png"
                        },
                        new
                        {
                            Id = 12,
                            Name = "1rpHDSXaRvlmmbFewuByZ5l02dD0lY99Nfm5TYu9Vdo=.png",
                            Path = "/files/1rpHDSXaRvlmmbFewuByZ5l02dD0lY99Nfm5TYu9Vdo=.png"
                        },
                        new
                        {
                            Id = 13,
                            Name = "+IAx1JqqRxZudz0ReeJAGz76F5LKfzo5paBh7HCSBc=.png",
                            Path = "/files/+IAx1JqqRxZudz0ReeJAGz76F5LKfzo5paBh7HCSBc=.png"
                        },
                        new
                        {
                            Id = 14,
                            Name = "FnsrvbI5NPfBBa+wcpa85l1orRZIdwppeOkm1EA5RiA=.png",
                            Path = "/files/FnsrvbI5NPfBBa+wcpa85l1orRZIdwppeOkm1EA5RiA=.png"
                        },
                        new
                        {
                            Id = 15,
                            Name = "MwDbR+apJTYsCV9tUP4WPs8W0EqEiqG5m5wrca5SZsw=.png",
                            Path = "/files/MwDbR+apJTYsCV9tUP4WPs8W0EqEiqG5m5wrca5SZsw=.png"
                        },
                        new
                        {
                            Id = 16,
                            Name = "1cDGXpJthPlZ+7Jk7++tTOYNDO0NdvQp6vtYFcpEeE=.png",
                            Path = "/files/1cDGXpJthPlZ+7Jk7++tTOYNDO0NdvQp6vtYFcpEeE=.png"
                        },
                        new
                        {
                            Id = 17,
                            Name = "8jPLR62nAIKQNMYx1TmBvtK57mq6PB6RnTVrtAm5SZg=.webp",
                            Path = "/files/booking-categories/8jPLR62nAIKQNMYx1TmBvtK57mq6PB6RnTVrtAm5SZg=.webp"
                        },
                        new
                        {
                            Id = 18,
                            Name = "PWKTeFbPU3hKtS0NS88R+ZkYbZpEHZcRTUxo21bdWQ=.jpg",
                            Path = "/files/booking-categories/PWKTeFbPU3hKtS0NS88R+ZkYbZpEHZcRTUxo21bdWQ=.jpg"
                        },
                        new
                        {
                            Id = 19,
                            Name = "WvBwu6I7aVKY4M1+UrxtVQ4FBqZoWjiuvwRg393+wc0=.jpg",
                            Path = "/files/booking-categories/WvBwu6I7aVKY4M1+UrxtVQ4FBqZoWjiuvwRg393+wc0=.jpg"
                        },
                        new
                        {
                            Id = 20,
                            Name = "DpIc5BjZEwT+N6kuEHdQ67EE7gWBrjZBnTlywfWAlo=.jpg",
                            Path = "/files/booking-categories/DpIc5BjZEwT+N6kuEHdQ67EE7gWBrjZBnTlywfWAlo=.jpg"
                        },
                        new
                        {
                            Id = 21,
                            Name = "ccbGiIK5RdTaNH3FKaLHCFXp9vvNDxNGGefGtA6s0a0=.jpg",
                            Path = "/files/booking-categories/ccbGiIK5RdTaNH3FKaLHCFXp9vvNDxNGGefGtA6s0a0=.jpg"
                        },
                        new
                        {
                            Id = 22,
                            Name = "SVGx5iqYWcxNoJZGFNAFc9+ZtYXSTWWGdUQdg3DQD2g=.jpg",
                            Path = "/files/booking-categories/SVGx5iqYWcxNoJZGFNAFc9+ZtYXSTWWGdUQdg3DQD2g=.jpg"
                        },
                        new
                        {
                            Id = 23,
                            Name = "h3DP1vCkB2kLPb2jyy6YpkMi3mJM6IYW1Y07gXNndLI=.jpg",
                            Path = "/files/booking-categories/h3DP1vCkB2kLPb2jyy6YpkMi3mJM6IYW1Y07gXNndLI=.jpg"
                        },
                        new
                        {
                            Id = 24,
                            Name = "WFBGRejuSFOJ9hY0jm5BSEIX7Zd6vPfGkoQsP3C8A=.jpg",
                            Path = "/files/booking-categories/WFBGRejuSFOJ9hY0jm5BSEIX7Zd6vPfGkoQsP3C8A=.jpg"
                        },
                        new
                        {
                            Id = 25,
                            Name = "AWKGQV1ZympDIFSlVlvgX8m2XN8bU8hqPoHuqp6aSsk=.jpg",
                            Path = "/files/booking-categories/AWKGQV1ZympDIFSlVlvgX8m2XN8bU8hqPoHuqp6aSsk=.jpg"
                        },
                        new
                        {
                            Id = 26,
                            Name = "nL4slBus5cwN7eAjhpHr6LHedLqV0WpgwZ64Xt7NsbE=.jpg",
                            Path = "/files/booking-categories/nL4slBus5cwN7eAjhpHr6LHedLqV0WpgwZ64Xt7NsbE=.jpg"
                        },
                        new
                        {
                            Id = 27,
                            Name = "jFNYJ0G0n69IMehflOLhqJN6L7mvtyvEhWYosFbCD0o=.jpg",
                            Path = "/files/booking-categories/jFNYJ0G0n69IMehflOLhqJN6L7mvtyvEhWYosFbCD0o=.jpg"
                        },
                        new
                        {
                            Id = 28,
                            Name = "PIKzYCNQ6eJX21q3tEUYIOspOHy7TBAhZjc4yCgXb0=.jpg",
                            Path = "/files/booking-categories/PIKzYCNQ6eJX21q3tEUYIOspOHy7TBAhZjc4yCgXb0=.jpg"
                        },
                        new
                        {
                            Id = 29,
                            Name = "wSjvY0V4thEVQdc2yc2HuHn3geZZuoJUUiKDp94TmI=.jpg",
                            Path = "/files/booking-categories/wSjvY0V4thEVQdc2yc2HuHn3geZZuoJUUiKDp94TmI=.jpg"
                        },
                        new
                        {
                            Id = 30,
                            Name = "aCULIjuxi3WuMDOpb4N2nzB2OlXNhu7qtPetG34cWNw=.jpg",
                            Path = "/files/booking-categories/aCULIjuxi3WuMDOpb4N2nzB2OlXNhu7qtPetG34cWNw=.jpg"
                        },
                        new
                        {
                            Id = 31,
                            Name = "cameLbbE7MwXMEWSpWQb5xelqkRtnd89WSHdQa748=.jpg",
                            Path = "/files/booking-categories/cameLbbE7MwXMEWSpWQb5xelqkRtnd89WSHdQa748=.jpg"
                        },
                        new
                        {
                            Id = 32,
                            Name = "s+zPgNsDGpzOmiGpErxaD25x38t08YakaWMh4oy+xko=.jpg",
                            Path = "/files/booking-categories/s+zPgNsDGpzOmiGpErxaD25x38t08YakaWMh4oy+xko=.jpg"
                        },
                        new
                        {
                            Id = 33,
                            Name = "vEsdBlDZSonr9G4nrPC+ADdB05nS3WtD1Vdtg2vEdls=.jpg",
                            Path = "/files/booking-categories/vEsdBlDZSonr9G4nrPC+ADdB05nS3WtD1Vdtg2vEdls=.jpg"
                        },
                        new
                        {
                            Id = 34,
                            Name = "xlO12jVkOIhTl6V0CAR3uC0clz782hFr60m90ZMoEtc=.jpg",
                            Path = "/files/booking-categories/xlO12jVkOIhTl6V0CAR3uC0clz782hFr60m90ZMoEtc=.jpg"
                        },
                        new
                        {
                            Id = 35,
                            Name = "YclkZnp1Xn6wxk1eUtjno9cHcS43eefuqhDzSzSUDFU=.jpg",
                            Path = "/files/booking-categories/YclkZnp1Xn6wxk1eUtjno9cHcS43eefuqhDzSzSUDFU=.jpg"
                        },
                        new
                        {
                            Id = 36,
                            Name = "v1uHZOLG2gjVU1d6EcFeWv61i5U6EJFBWzovIbiTWfc=.jpg",
                            Path = "/files/booking-categories/v1uHZOLG2gjVU1d6EcFeWv61i5U6EJFBWzovIbiTWfc=.jpg"
                        },
                        new
                        {
                            Id = 37,
                            Name = "28gfiUeA8lD6E5eO4eHc31vvFGarpWk7DoAGwzDd4=.jpg",
                            Path = "/files/booking-categories/28gfiUeA8lD6E5eO4eHc31vvFGarpWk7DoAGwzDd4=.jpg"
                        },
                        new
                        {
                            Id = 38,
                            Name = "38ULX8oMuuiBBrWmybcDv9mE02zeXuKGyKwxJ0wbbvc=.jpg",
                            Path = "/files/booking-categories/38ULX8oMuuiBBrWmybcDv9mE02zeXuKGyKwxJ0wbbvc=.jpg"
                        },
                        new
                        {
                            Id = 39,
                            Name = "k60eWzKITm0qHXThVzz+VFtcmDwS+Geqw4qpVaVntww=.jpg",
                            Path = "/files/booking-categories/k60eWzKITm0qHXThVzz+VFtcmDwS+Geqw4qpVaVntww=.jpg"
                        },
                        new
                        {
                            Id = 40,
                            Name = "UtWw0Kd9VsqxkDAyjdo1kR4pTXgRYtgr8bnIafjm4KA=.jpg",
                            Path = "/files/booking-categories/UtWw0Kd9VsqxkDAyjdo1kR4pTXgRYtgr8bnIafjm4KA=.jpg"
                        },
                        new
                        {
                            Id = 41,
                            Name = "2cJ9bLYWaRmntd32hJMfHkGSAKl44mL6skW7xBgxSQ=.jpg",
                            Path = "/files/cities/2cJ9bLYWaRmntd32hJMfHkGSAKl44mL6skW7xBgxSQ=.jpg"
                        },
                        new
                        {
                            Id = 42,
                            Name = "r25bYhQuTGlu2Q3XLxx5AjBOymSwaFoGrE3NkSt3g=.jpg",
                            Path = "/files/cities/r25bYhQuTGlu2Q3XLxx5AjBOymSwaFoGrE3NkSt3g=.jpg"
                        },
                        new
                        {
                            Id = 43,
                            Name = "AO9WI6rkbYft1QE5Ht7Bea3FacTX8koOpW34qDB1Hxs=.jpg",
                            Path = "/files/cities/AO9WI6rkbYft1QE5Ht7Bea3FacTX8koOpW34qDB1Hxs=.jpg"
                        },
                        new
                        {
                            Id = 44,
                            Name = "qf+01PybqRDOrxpESro3QvN7bLPIzPHlXtQzXYaRJQ=.jpg",
                            Path = "/files/cities/qf+01PybqRDOrxpESro3QvN7bLPIzPHlXtQzXYaRJQ=.jpg"
                        },
                        new
                        {
                            Id = 45,
                            Name = "ACCQwXjlZ0HyF0ZEK+9JeiwKmHfbRapg2+hCfoR+GQ=.webp",
                            Path = "/files/cities/ACCQwXjlZ0HyF0ZEK+9JeiwKmHfbRapg2+hCfoR+GQ=.webp"
                        },
                        new
                        {
                            Id = 46,
                            Name = "zzfyT2YznMbRTX3WMQGcmRvdHWpKFPtZBYakvJyJeFQ=.jpg",
                            Path = "/files/cities/zzfyT2YznMbRTX3WMQGcmRvdHWpKFPtZBYakvJyJeFQ=.jpg"
                        },
                        new
                        {
                            Id = 47,
                            Name = "wUR7kBl2k5hbmSez3shxGijGAy7he9XsySVgVmThu38=.jpg",
                            Path = "/files/cities/wUR7kBl2k5hbmSez3shxGijGAy7he9XsySVgVmThu38=.jpg"
                        },
                        new
                        {
                            Id = 48,
                            Name = "iGX8wogugyA1tS2KsT5wiPJtOm72QVPKbKbaTkwC54c=.webp",
                            Path = "/files/cities/iGX8wogugyA1tS2KsT5wiPJtOm72QVPKbKbaTkwC54c=.webp"
                        },
                        new
                        {
                            Id = 49,
                            Name = "ZMGW71dUcALX3Fmi27UwsbPDRCOdeW7gpVKOPUyRZBs=.jpg",
                            Path = "/files/cities/ZMGW71dUcALX3Fmi27UwsbPDRCOdeW7gpVKOPUyRZBs=.jpg"
                        },
                        new
                        {
                            Id = 50,
                            Name = "ja9zowNm1GdRAwBxY+kdzv9o6vP9Bi3PqNaBVl2xuQ=.png",
                            Path = "/files/cities/ja9zowNm1GdRAwBxY+kdzv9o6vP9Bi3PqNaBVl2xuQ=.png"
                        },
                        new
                        {
                            Id = 51,
                            Name = "Qhc5DZhf0xTviHaF2EJ7Y5ppUtPDWfw3xiGHP0y8k8c=.jpg",
                            Path = "/files/cities/Qhc5DZhf0xTviHaF2EJ7Y5ppUtPDWfw3xiGHP0y8k8c=.jpg"
                        },
                        new
                        {
                            Id = 52,
                            Name = "MnDxHSrTUYmyX8Tsx0qUVRDL33fRQaVaE0+ihCGDoM=.jpg",
                            Path = "/files/cities/MnDxHSrTUYmyX8Tsx0qUVRDL33fRQaVaE0+ihCGDoM=.jpg"
                        },
                        new
                        {
                            Id = 53,
                            Name = "Yp6XJTcaYN3pDZncxFOSJSsqdXfX0b4yg6zNr9cgg=.jpg",
                            Path = "/files/cities/Yp6XJTcaYN3pDZncxFOSJSsqdXfX0b4yg6zNr9cgg=.jpg"
                        },
                        new
                        {
                            Id = 54,
                            Name = "",
                            Path = "/files/cities/"
                        },
                        new
                        {
                            Id = 55,
                            Name = "",
                            Path = "/files/cities/"
                        },
                        new
                        {
                            Id = 56,
                            Name = "",
                            Path = "/files/cities/"
                        },
                        new
                        {
                            Id = 57,
                            Name = "",
                            Path = "/files/cities/"
                        },
                        new
                        {
                            Id = 58,
                            Name = "",
                            Path = "/files/cities/"
                        },
                        new
                        {
                            Id = 59,
                            Name = "",
                            Path = "/files/cities/"
                        },
                        new
                        {
                            Id = 60,
                            Name = "",
                            Path = "/files/cities/"
                        },
                        new
                        {
                            Id = 61,
                            Name = "",
                            Path = "/files/cities/"
                        },
                        new
                        {
                            Id = 62,
                            Name = "",
                            Path = "/files/cities/"
                        },
                        new
                        {
                            Id = 63,
                            Name = "",
                            Path = "/files/cities/"
                        },
                        new
                        {
                            Id = 64,
                            Name = "",
                            Path = "/files/cities/"
                        },
                        new
                        {
                            Id = 65,
                            Name = "",
                            Path = "/files/cities/"
                        },
                        new
                        {
                            Id = 66,
                            Name = "",
                            Path = "/files/cities/"
                        },
                        new
                        {
                            Id = 67,
                            Name = "",
                            Path = "/files/cities/"
                        },
                        new
                        {
                            Id = 68,
                            Name = "",
                            Path = "/files/cities/"
                        },
                        new
                        {
                            Id = 69,
                            Name = "",
                            Path = "/files/cities/"
                        },
                        new
                        {
                            Id = 70,
                            Name = "",
                            Path = "/files/cities/"
                        },
                        new
                        {
                            Id = 71,
                            Name = "",
                            Path = "/files/cities/"
                        },
                        new
                        {
                            Id = 72,
                            Name = "",
                            Path = "/files/cities/"
                        },
                        new
                        {
                            Id = 73,
                            Name = "",
                            Path = "/files/cities/"
                        },
                        new
                        {
                            Id = 74,
                            Name = "",
                            Path = "/files/cities/"
                        },
                        new
                        {
                            Id = 75,
                            Name = "",
                            Path = "/files/cities/"
                        },
                        new
                        {
                            Id = 76,
                            Name = "",
                            Path = "/files/cities/"
                        },
                        new
                        {
                            Id = 77,
                            Name = "",
                            Path = "/files/cities/"
                        },
                        new
                        {
                            Id = 78,
                            Name = "",
                            Path = "/files/cities/"
                        },
                        new
                        {
                            Id = 79,
                            Name = "",
                            Path = "/files/cities/"
                        },
                        new
                        {
                            Id = 80,
                            Name = "",
                            Path = "/files/cities/"
                        },
                        new
                        {
                            Id = 81,
                            Name = "",
                            Path = "/files/cities/"
                        },
                        new
                        {
                            Id = 82,
                            Name = "",
                            Path = "/files/cities/"
                        },
                        new
                        {
                            Id = 83,
                            Name = "",
                            Path = "/files/cities/"
                        },
                        new
                        {
                            Id = 84,
                            Name = "",
                            Path = "/files/cities/"
                        },
                        new
                        {
                            Id = 85,
                            Name = "",
                            Path = "/files/cities/"
                        },
                        new
                        {
                            Id = 86,
                            Name = "",
                            Path = "/files/cities/"
                        },
                        new
                        {
                            Id = 87,
                            Name = "",
                            Path = "/files/cities/"
                        },
                        new
                        {
                            Id = 88,
                            Name = "",
                            Path = "/files/cities/"
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.FlightBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("UserId");

                    b.ToTable("FlightBookings");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Flights.FlightClassType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.ToTable("FlightClassTypes");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Language");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "English"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Ukrainian"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Russian"
                        },
                        new
                        {
                            Id = 4,
                            Title = "German"
                        },
                        new
                        {
                            Id = 5,
                            Title = "Polish"
                        },
                        new
                        {
                            Id = 6,
                            Title = "Arabic"
                        },
                        new
                        {
                            Id = 7,
                            Title = "Italian"
                        },
                        new
                        {
                            Id = 8,
                            Title = "Spanish"
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Location.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddressText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Address");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId")
                        .IsUnique()
                        .HasFilter("[DistrictId] IS NOT NULL");

                    b.HasIndex("RegionId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressText = "St. Deribasovskaya, 23",
                            CityId = 1,
                            CountryId = 1,
                            RegionId = 1
                        },
                        new
                        {
                            Id = 2,
                            AddressText = "St. Deribasovskaya, 42",
                            CityId = 1,
                            CountryId = 1,
                            RegionId = 2
                        },
                        new
                        {
                            Id = 3,
                            AddressText = "St. Khreshchatyk, 72",
                            CityId = 2,
                            CountryId = 1,
                            RegionId = 3
                        },
                        new
                        {
                            Id = 4,
                            AddressText = "St. Khreshchatyk, 44",
                            CityId = 3,
                            CountryId = 1,
                            RegionId = 4
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Location.Airport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ImageId");

                    b.ToTable("Airports");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Location.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("ImageId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            ImageId = 41,
                            Title = "Odesa"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            ImageId = 42,
                            Title = "Kharkiv"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            ImageId = 43,
                            Title = "Dnipro"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 1,
                            ImageId = 44,
                            Title = "Donetsk"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 1,
                            ImageId = 45,
                            Title = "Lviv"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 1,
                            ImageId = 46,
                            Title = "Zaporizhzhia"
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 1,
                            ImageId = 47,
                            Title = "Kryvyi Rih"
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 1,
                            ImageId = 48,
                            Title = "Mykolaiv"
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 1,
                            ImageId = 49,
                            Title = "Sevastopol"
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 1,
                            ImageId = 50,
                            Title = "Mariupol"
                        },
                        new
                        {
                            Id = 11,
                            CountryId = 1,
                            ImageId = 51,
                            Title = "Luhansk"
                        },
                        new
                        {
                            Id = 12,
                            CountryId = 1,
                            ImageId = 52,
                            Title = "Vinnytsia"
                        },
                        new
                        {
                            Id = 13,
                            CountryId = 1,
                            ImageId = 53,
                            Title = "Makiivka"
                        },
                        new
                        {
                            Id = 14,
                            CountryId = 1,
                            ImageId = 54,
                            Title = "Simferopol"
                        },
                        new
                        {
                            Id = 15,
                            CountryId = 1,
                            ImageId = 55,
                            Title = "Chernihiv"
                        },
                        new
                        {
                            Id = 16,
                            CountryId = 1,
                            ImageId = 56,
                            Title = "Kherson"
                        },
                        new
                        {
                            Id = 17,
                            CountryId = 1,
                            ImageId = 57,
                            Title = "Poltava"
                        },
                        new
                        {
                            Id = 18,
                            CountryId = 1,
                            ImageId = 58,
                            Title = "Khmelnytskyi"
                        },
                        new
                        {
                            Id = 19,
                            CountryId = 1,
                            ImageId = 59,
                            Title = "Cherkasy"
                        },
                        new
                        {
                            Id = 20,
                            CountryId = 1,
                            ImageId = 60,
                            Title = "Chernivtsi"
                        },
                        new
                        {
                            Id = 21,
                            CountryId = 1,
                            ImageId = 61,
                            Title = "Zhytomyr"
                        },
                        new
                        {
                            Id = 22,
                            CountryId = 1,
                            ImageId = 62,
                            Title = "Sumy"
                        },
                        new
                        {
                            Id = 23,
                            CountryId = 1,
                            ImageId = 63,
                            Title = "Rivne"
                        },
                        new
                        {
                            Id = 24,
                            CountryId = 1,
                            ImageId = 64,
                            Title = "Horlivka"
                        },
                        new
                        {
                            Id = 25,
                            CountryId = 1,
                            ImageId = 65,
                            Title = "Ivano-Frankivsk"
                        },
                        new
                        {
                            Id = 26,
                            CountryId = 1,
                            ImageId = 66,
                            Title = "Kamianske"
                        },
                        new
                        {
                            Id = 27,
                            CountryId = 1,
                            ImageId = 67,
                            Title = "Ternopil"
                        },
                        new
                        {
                            Id = 28,
                            CountryId = 1,
                            ImageId = 68,
                            Title = "Kropyvnytskyi"
                        },
                        new
                        {
                            Id = 29,
                            CountryId = 1,
                            ImageId = 69,
                            Title = "Kremenchuk"
                        },
                        new
                        {
                            Id = 30,
                            CountryId = 1,
                            ImageId = 70,
                            Title = "Lutsk"
                        },
                        new
                        {
                            Id = 31,
                            CountryId = 1,
                            ImageId = 71,
                            Title = "Bila Tserkva"
                        },
                        new
                        {
                            Id = 32,
                            CountryId = 1,
                            ImageId = 72,
                            Title = "Kerch"
                        },
                        new
                        {
                            Id = 33,
                            CountryId = 1,
                            ImageId = 73,
                            Title = "Melitopol"
                        },
                        new
                        {
                            Id = 34,
                            CountryId = 1,
                            ImageId = 74,
                            Title = "Kramatorsk"
                        },
                        new
                        {
                            Id = 35,
                            CountryId = 1,
                            ImageId = 75,
                            Title = "Uzhhorod"
                        },
                        new
                        {
                            Id = 36,
                            CountryId = 1,
                            ImageId = 76,
                            Title = "Brovary"
                        },
                        new
                        {
                            Id = 37,
                            CountryId = 1,
                            ImageId = 77,
                            Title = "Yevpatoria"
                        },
                        new
                        {
                            Id = 38,
                            CountryId = 1,
                            ImageId = 78,
                            Title = "Berdiansk"
                        },
                        new
                        {
                            Id = 39,
                            CountryId = 1,
                            ImageId = 79,
                            Title = "Nikopol"
                        },
                        new
                        {
                            Id = 40,
                            CountryId = 1,
                            ImageId = 80,
                            Title = "Sloviansk"
                        },
                        new
                        {
                            Id = 41,
                            CountryId = 1,
                            ImageId = 81,
                            Title = "Alchevsk"
                        },
                        new
                        {
                            Id = 42,
                            CountryId = 1,
                            ImageId = 82,
                            Title = "Pavlohrad"
                        },
                        new
                        {
                            Id = 43,
                            CountryId = 1,
                            ImageId = 83,
                            Title = "Sievierodonetsk"
                        },
                        new
                        {
                            Id = 44,
                            CountryId = 1,
                            ImageId = 84,
                            Title = "Kamianets-Podilskyi"
                        },
                        new
                        {
                            Id = 45,
                            CountryId = 1,
                            ImageId = 85,
                            Title = "Lysychansk"
                        },
                        new
                        {
                            Id = 46,
                            CountryId = 1,
                            ImageId = 86,
                            Title = "Mukachevo"
                        },
                        new
                        {
                            Id = 47,
                            CountryId = 1,
                            ImageId = 87,
                            Title = "Konotop"
                        },
                        new
                        {
                            Id = 48,
                            CountryId = 1,
                            ImageId = 88,
                            Title = "Uman"
                        },
                        new
                        {
                            Id = 49,
                            CountryId = 2,
                            ImageId = 1,
                            Title = "New York"
                        },
                        new
                        {
                            Id = 50,
                            CountryId = 2,
                            ImageId = 1,
                            Title = "Los Angeles"
                        },
                        new
                        {
                            Id = 51,
                            CountryId = 2,
                            ImageId = 1,
                            Title = "Chicago"
                        },
                        new
                        {
                            Id = 52,
                            CountryId = 2,
                            ImageId = 1,
                            Title = "Houston"
                        },
                        new
                        {
                            Id = 53,
                            CountryId = 2,
                            ImageId = 1,
                            Title = "Phoenix"
                        },
                        new
                        {
                            Id = 54,
                            CountryId = 2,
                            ImageId = 1,
                            Title = "Philadelphia"
                        },
                        new
                        {
                            Id = 55,
                            CountryId = 2,
                            ImageId = 1,
                            Title = "San Antonio"
                        },
                        new
                        {
                            Id = 56,
                            CountryId = 2,
                            ImageId = 1,
                            Title = "San Diego"
                        },
                        new
                        {
                            Id = 57,
                            CountryId = 2,
                            ImageId = 1,
                            Title = "Dallas"
                        },
                        new
                        {
                            Id = 58,
                            CountryId = 2,
                            ImageId = 1,
                            Title = "San Jose"
                        },
                        new
                        {
                            Id = 59,
                            CountryId = 2,
                            ImageId = 1,
                            Title = "Austin"
                        },
                        new
                        {
                            Id = 60,
                            CountryId = 2,
                            ImageId = 1,
                            Title = "Jacksonville"
                        },
                        new
                        {
                            Id = 61,
                            CountryId = 2,
                            ImageId = 1,
                            Title = "Fort Worth"
                        },
                        new
                        {
                            Id = 62,
                            CountryId = 2,
                            ImageId = 1,
                            Title = "Columbus"
                        },
                        new
                        {
                            Id = 63,
                            CountryId = 2,
                            ImageId = 1,
                            Title = "Indianapolis"
                        },
                        new
                        {
                            Id = 64,
                            CountryId = 2,
                            ImageId = 1,
                            Title = "Charlotte"
                        },
                        new
                        {
                            Id = 65,
                            CountryId = 2,
                            ImageId = 1,
                            Title = "San Francisco"
                        },
                        new
                        {
                            Id = 66,
                            CountryId = 2,
                            ImageId = 1,
                            Title = "Seattle"
                        },
                        new
                        {
                            Id = 67,
                            CountryId = 2,
                            ImageId = 1,
                            Title = "Denver"
                        },
                        new
                        {
                            Id = 68,
                            CountryId = 2,
                            ImageId = 1,
                            Title = "Washington"
                        },
                        new
                        {
                            Id = 69,
                            CountryId = 2,
                            ImageId = 1,
                            Title = "Nashville["
                        },
                        new
                        {
                            Id = 70,
                            CountryId = 2,
                            ImageId = 1,
                            Title = "Oklahoma City"
                        },
                        new
                        {
                            Id = 71,
                            CountryId = 2,
                            ImageId = 1,
                            Title = "El Paso"
                        },
                        new
                        {
                            Id = 72,
                            CountryId = 2,
                            ImageId = 1,
                            Title = "Boston"
                        },
                        new
                        {
                            Id = 73,
                            CountryId = 2,
                            ImageId = 1,
                            Title = "Portland"
                        },
                        new
                        {
                            Id = 74,
                            CountryId = 2,
                            ImageId = 1,
                            Title = "Las Vegas"
                        },
                        new
                        {
                            Id = 75,
                            CountryId = 2,
                            ImageId = 1,
                            Title = "Detroit"
                        },
                        new
                        {
                            Id = 76,
                            CountryId = 2,
                            ImageId = 1,
                            Title = "Memphis"
                        },
                        new
                        {
                            Id = 77,
                            CountryId = 2,
                            ImageId = 1,
                            Title = "Louisville["
                        },
                        new
                        {
                            Id = 78,
                            CountryId = 2,
                            ImageId = 1,
                            Title = "Baltimore"
                        },
                        new
                        {
                            Id = 79,
                            CountryId = 2,
                            ImageId = 1,
                            Title = "Milwaukee"
                        },
                        new
                        {
                            Id = 80,
                            CountryId = 2,
                            ImageId = 1,
                            Title = "Sacramento"
                        },
                        new
                        {
                            Id = 81,
                            CountryId = 2,
                            ImageId = 1,
                            Title = "Atlanta"
                        },
                        new
                        {
                            Id = 82,
                            CountryId = 2,
                            ImageId = 1,
                            Title = "Honolulu"
                        },
                        new
                        {
                            Id = 83,
                            CountryId = 3,
                            ImageId = 3,
                            Title = "London"
                        },
                        new
                        {
                            Id = 84,
                            CountryId = 3,
                            ImageId = 3,
                            Title = "Birmingham"
                        },
                        new
                        {
                            Id = 85,
                            CountryId = 3,
                            ImageId = 3,
                            Title = "Leeds"
                        },
                        new
                        {
                            Id = 86,
                            CountryId = 3,
                            ImageId = 3,
                            Title = "Glasgow"
                        },
                        new
                        {
                            Id = 87,
                            CountryId = 3,
                            ImageId = 3,
                            Title = "Sheffield"
                        },
                        new
                        {
                            Id = 88,
                            CountryId = 3,
                            ImageId = 3,
                            Title = "Bradford"
                        },
                        new
                        {
                            Id = 89,
                            CountryId = 3,
                            ImageId = 3,
                            Title = "Liverpool"
                        },
                        new
                        {
                            Id = 90,
                            CountryId = 3,
                            ImageId = 3,
                            Title = "Edinburgh"
                        },
                        new
                        {
                            Id = 91,
                            CountryId = 3,
                            ImageId = 3,
                            Title = "Manchester"
                        },
                        new
                        {
                            Id = 92,
                            CountryId = 3,
                            ImageId = 3,
                            Title = "Bristol"
                        },
                        new
                        {
                            Id = 93,
                            CountryId = 3,
                            ImageId = 3,
                            Title = "Kirklees"
                        },
                        new
                        {
                            Id = 94,
                            CountryId = 3,
                            ImageId = 3,
                            Title = "Fife"
                        },
                        new
                        {
                            Id = 95,
                            CountryId = 3,
                            ImageId = 3,
                            Title = "Wirral"
                        },
                        new
                        {
                            Id = 96,
                            CountryId = 3,
                            ImageId = 3,
                            Title = "North Lanarkshire"
                        },
                        new
                        {
                            Id = 97,
                            CountryId = 3,
                            ImageId = 3,
                            Title = "Wakefield"
                        },
                        new
                        {
                            Id = 98,
                            CountryId = 3,
                            ImageId = 3,
                            Title = "Cardiff"
                        },
                        new
                        {
                            Id = 99,
                            CountryId = 3,
                            ImageId = 3,
                            Title = "Dudley"
                        },
                        new
                        {
                            Id = 100,
                            CountryId = 3,
                            ImageId = 3,
                            Title = "Wigan"
                        },
                        new
                        {
                            Id = 101,
                            CountryId = 49,
                            ImageId = 4,
                            Title = "Istanbul"
                        },
                        new
                        {
                            Id = 102,
                            CountryId = 49,
                            ImageId = 4,
                            Title = "Ankara"
                        },
                        new
                        {
                            Id = 103,
                            CountryId = 49,
                            ImageId = 4,
                            Title = "İzmir"
                        },
                        new
                        {
                            Id = 104,
                            CountryId = 49,
                            ImageId = 4,
                            Title = "Bursa"
                        },
                        new
                        {
                            Id = 105,
                            CountryId = 49,
                            ImageId = 4,
                            Title = "Adana"
                        },
                        new
                        {
                            Id = 106,
                            CountryId = 49,
                            ImageId = 4,
                            Title = "Gaziantep"
                        },
                        new
                        {
                            Id = 107,
                            CountryId = 49,
                            ImageId = 4,
                            Title = "Konya"
                        },
                        new
                        {
                            Id = 108,
                            CountryId = 49,
                            ImageId = 4,
                            Title = "Antalya"
                        },
                        new
                        {
                            Id = 109,
                            CountryId = 49,
                            ImageId = 4,
                            Title = "Kayseri"
                        },
                        new
                        {
                            Id = 110,
                            CountryId = 49,
                            ImageId = 4,
                            Title = "Mersin"
                        },
                        new
                        {
                            Id = 111,
                            CountryId = 49,
                            ImageId = 4,
                            Title = "Eskişehir"
                        },
                        new
                        {
                            Id = 112,
                            CountryId = 49,
                            ImageId = 4,
                            Title = "Diyarbakır"
                        },
                        new
                        {
                            Id = 113,
                            CountryId = 10,
                            ImageId = 5,
                            Title = "Budapest"
                        },
                        new
                        {
                            Id = 114,
                            CountryId = 10,
                            ImageId = 5,
                            Title = "Debrecen"
                        },
                        new
                        {
                            Id = 115,
                            CountryId = 10,
                            ImageId = 5,
                            Title = "Szeged"
                        },
                        new
                        {
                            Id = 116,
                            CountryId = 10,
                            ImageId = 5,
                            Title = "Miskolc"
                        },
                        new
                        {
                            Id = 117,
                            CountryId = 10,
                            ImageId = 5,
                            Title = "Pécs"
                        },
                        new
                        {
                            Id = 118,
                            CountryId = 60,
                            ImageId = 6,
                            Title = "Rome"
                        },
                        new
                        {
                            Id = 119,
                            CountryId = 60,
                            ImageId = 6,
                            Title = "Milan"
                        },
                        new
                        {
                            Id = 120,
                            CountryId = 60,
                            ImageId = 6,
                            Title = "Naples"
                        },
                        new
                        {
                            Id = 121,
                            CountryId = 60,
                            ImageId = 6,
                            Title = "Turin"
                        },
                        new
                        {
                            Id = 122,
                            CountryId = 60,
                            ImageId = 6,
                            Title = "Palermo"
                        },
                        new
                        {
                            Id = 123,
                            CountryId = 60,
                            ImageId = 6,
                            Title = "Genoa"
                        },
                        new
                        {
                            Id = 124,
                            CountryId = 64,
                            ImageId = 7,
                            Title = "Stockholm"
                        },
                        new
                        {
                            Id = 125,
                            CountryId = 64,
                            ImageId = 7,
                            Title = "Gothenburg"
                        },
                        new
                        {
                            Id = 126,
                            CountryId = 64,
                            ImageId = 7,
                            Title = "Malmö"
                        },
                        new
                        {
                            Id = 127,
                            CountryId = 64,
                            ImageId = 7,
                            Title = "Uppsala"
                        },
                        new
                        {
                            Id = 128,
                            CountryId = 64,
                            ImageId = 7,
                            Title = "Västerås"
                        },
                        new
                        {
                            Id = 129,
                            CountryId = 63,
                            ImageId = 8,
                            Title = "Oslo"
                        },
                        new
                        {
                            Id = 130,
                            CountryId = 63,
                            ImageId = 8,
                            Title = "Drammen"
                        },
                        new
                        {
                            Id = 131,
                            CountryId = 63,
                            ImageId = 8,
                            Title = "Trondheim"
                        },
                        new
                        {
                            Id = 132,
                            CountryId = 63,
                            ImageId = 8,
                            Title = "Kristiansand"
                        },
                        new
                        {
                            Id = 133,
                            CountryId = 63,
                            ImageId = 8,
                            Title = "Stavanger"
                        },
                        new
                        {
                            Id = 134,
                            CountryId = 72,
                            ImageId = 9,
                            Title = "Madrid"
                        },
                        new
                        {
                            Id = 135,
                            CountryId = 72,
                            ImageId = 9,
                            Title = "Barcelona"
                        },
                        new
                        {
                            Id = 136,
                            CountryId = 72,
                            ImageId = 9,
                            Title = "Valencia"
                        },
                        new
                        {
                            Id = 137,
                            CountryId = 72,
                            ImageId = 9,
                            Title = "Sevilla"
                        },
                        new
                        {
                            Id = 138,
                            CountryId = 72,
                            ImageId = 9,
                            Title = "Zaragoza"
                        },
                        new
                        {
                            Id = 139,
                            CountryId = 80,
                            ImageId = 10,
                            Title = "Athens"
                        },
                        new
                        {
                            Id = 140,
                            CountryId = 80,
                            ImageId = 10,
                            Title = "Thessaloniki"
                        },
                        new
                        {
                            Id = 141,
                            CountryId = 80,
                            ImageId = 10,
                            Title = "Patra"
                        },
                        new
                        {
                            Id = 142,
                            CountryId = 80,
                            ImageId = 10,
                            Title = "Piraeus"
                        },
                        new
                        {
                            Id = 143,
                            CountryId = 80,
                            ImageId = 10,
                            Title = "Larisa"
                        },
                        new
                        {
                            Id = 144,
                            CountryId = 113,
                            ImageId = 11,
                            Title = "Jerusalem"
                        },
                        new
                        {
                            Id = 145,
                            CountryId = 113,
                            ImageId = 11,
                            Title = "Tel Aviv"
                        },
                        new
                        {
                            Id = 146,
                            CountryId = 113,
                            ImageId = 11,
                            Title = "West Jerusalem"
                        },
                        new
                        {
                            Id = 147,
                            CountryId = 113,
                            ImageId = 11,
                            Title = "Haifa"
                        },
                        new
                        {
                            Id = 148,
                            CountryId = 113,
                            ImageId = 11,
                            Title = "Ashdod"
                        },
                        new
                        {
                            Id = 149,
                            CountryId = 114,
                            ImageId = 12,
                            Title = "Berlin"
                        },
                        new
                        {
                            Id = 150,
                            CountryId = 114,
                            ImageId = 12,
                            Title = "Hamburg"
                        },
                        new
                        {
                            Id = 151,
                            CountryId = 114,
                            ImageId = 12,
                            Title = "München"
                        },
                        new
                        {
                            Id = 152,
                            CountryId = 114,
                            ImageId = 12,
                            Title = "Köln"
                        },
                        new
                        {
                            Id = 153,
                            CountryId = 114,
                            ImageId = 12,
                            Title = "Frankfurt"
                        },
                        new
                        {
                            Id = 154,
                            CountryId = 123,
                            ImageId = 13,
                            Title = "Paris"
                        },
                        new
                        {
                            Id = 155,
                            CountryId = 123,
                            ImageId = 13,
                            Title = "Marseille"
                        },
                        new
                        {
                            Id = 156,
                            CountryId = 123,
                            ImageId = 13,
                            Title = "Lyon"
                        },
                        new
                        {
                            Id = 157,
                            CountryId = 123,
                            ImageId = 13,
                            Title = "Toulouse"
                        },
                        new
                        {
                            Id = 158,
                            CountryId = 123,
                            ImageId = 13,
                            Title = "Nice"
                        },
                        new
                        {
                            Id = 159,
                            CountryId = 130,
                            ImageId = 14,
                            Title = "Sydney"
                        },
                        new
                        {
                            Id = 160,
                            CountryId = 130,
                            ImageId = 14,
                            Title = "Melbourne"
                        },
                        new
                        {
                            Id = 161,
                            CountryId = 130,
                            ImageId = 14,
                            Title = "Brisbane"
                        },
                        new
                        {
                            Id = 162,
                            CountryId = 130,
                            ImageId = 14,
                            Title = "Perth"
                        },
                        new
                        {
                            Id = 163,
                            CountryId = 130,
                            ImageId = 14,
                            Title = "Adelaide "
                        },
                        new
                        {
                            Id = 164,
                            CountryId = 129,
                            ImageId = 15,
                            Title = "Toronto"
                        },
                        new
                        {
                            Id = 165,
                            CountryId = 129,
                            ImageId = 15,
                            Title = "Montréal"
                        },
                        new
                        {
                            Id = 166,
                            CountryId = 129,
                            ImageId = 15,
                            Title = "Vancouver"
                        },
                        new
                        {
                            Id = 167,
                            CountryId = 129,
                            ImageId = 15,
                            Title = "Calgary"
                        },
                        new
                        {
                            Id = 168,
                            CountryId = 129,
                            ImageId = 15,
                            Title = "Edmonton"
                        },
                        new
                        {
                            Id = 169,
                            CountryId = 135,
                            ImageId = 16,
                            Title = "Tokyo"
                        },
                        new
                        {
                            Id = 170,
                            CountryId = 135,
                            ImageId = 16,
                            Title = "Yokohama"
                        },
                        new
                        {
                            Id = 171,
                            CountryId = 135,
                            ImageId = 16,
                            Title = "Osaka"
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Location.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageId = 2,
                            Title = "Ukraine"
                        },
                        new
                        {
                            Id = 2,
                            ImageId = 1,
                            Title = "USA"
                        },
                        new
                        {
                            Id = 3,
                            ImageId = 3,
                            Title = "UK"
                        },
                        new
                        {
                            Id = 4,
                            ImageId = 1,
                            Title = "Belarus"
                        },
                        new
                        {
                            Id = 5,
                            ImageId = 1,
                            Title = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            Id = 6,
                            ImageId = 1,
                            Title = "Algeria"
                        },
                        new
                        {
                            Id = 7,
                            ImageId = 1,
                            Title = "Chad"
                        },
                        new
                        {
                            Id = 8,
                            ImageId = 1,
                            Title = "Czech Republic"
                        },
                        new
                        {
                            Id = 9,
                            ImageId = 1,
                            Title = "French Polynesia"
                        },
                        new
                        {
                            Id = 10,
                            ImageId = 5,
                            Title = "Hungary"
                        },
                        new
                        {
                            Id = 11,
                            ImageId = 1,
                            Title = "Gabon"
                        },
                        new
                        {
                            Id = 12,
                            ImageId = 1,
                            Title = "Iraq"
                        },
                        new
                        {
                            Id = 13,
                            ImageId = 1,
                            Title = "Madagascar"
                        },
                        new
                        {
                            Id = 14,
                            ImageId = 1,
                            Title = "Namibia"
                        },
                        new
                        {
                            Id = 15,
                            ImageId = 1,
                            Title = "Lithuania"
                        },
                        new
                        {
                            Id = 16,
                            ImageId = 1,
                            Title = "Niue"
                        },
                        new
                        {
                            Id = 17,
                            ImageId = 1,
                            Title = "Nigeria"
                        },
                        new
                        {
                            Id = 18,
                            ImageId = 1,
                            Title = "Oman"
                        },
                        new
                        {
                            Id = 19,
                            ImageId = 1,
                            Title = "Saint Kitts and Nevis"
                        },
                        new
                        {
                            Id = 20,
                            ImageId = 1,
                            Title = "San Marino"
                        },
                        new
                        {
                            Id = 21,
                            ImageId = 1,
                            Title = "Russia"
                        },
                        new
                        {
                            Id = 22,
                            ImageId = 1,
                            Title = "Seychelles"
                        },
                        new
                        {
                            Id = 23,
                            ImageId = 1,
                            Title = "Sri Lanka"
                        },
                        new
                        {
                            Id = 24,
                            ImageId = 1,
                            Title = "Senegal"
                        },
                        new
                        {
                            Id = 25,
                            ImageId = 1,
                            Title = "Trinidad and Tobago"
                        },
                        new
                        {
                            Id = 26,
                            ImageId = 1,
                            Title = "Uruguay"
                        },
                        new
                        {
                            Id = 27,
                            ImageId = 1,
                            Title = "Uzbekistan"
                        },
                        new
                        {
                            Id = 28,
                            ImageId = 1,
                            Title = "Montenegro"
                        },
                        new
                        {
                            Id = 29,
                            ImageId = 1,
                            Title = "Saint Barts"
                        },
                        new
                        {
                            Id = 30,
                            ImageId = 1,
                            Title = "Albania"
                        },
                        new
                        {
                            Id = 31,
                            ImageId = 1,
                            Title = "Andorra"
                        },
                        new
                        {
                            Id = 32,
                            ImageId = 1,
                            Title = "Botswana"
                        },
                        new
                        {
                            Id = 33,
                            ImageId = 1,
                            Title = "Burundi"
                        },
                        new
                        {
                            Id = 34,
                            ImageId = 1,
                            Title = "Denmark"
                        },
                        new
                        {
                            Id = 35,
                            ImageId = 1,
                            Title = "China"
                        },
                        new
                        {
                            Id = 36,
                            ImageId = 1,
                            Title = "Cape Verde"
                        },
                        new
                        {
                            Id = 37,
                            ImageId = 1,
                            Title = "Ecuador"
                        },
                        new
                        {
                            Id = 38,
                            ImageId = 1,
                            Title = "India"
                        },
                        new
                        {
                            Id = 39,
                            ImageId = 1,
                            Title = "Lebanon"
                        },
                        new
                        {
                            Id = 40,
                            ImageId = 1,
                            Title = "Malaysia"
                        },
                        new
                        {
                            Id = 41,
                            ImageId = 1,
                            Title = "Nepal"
                        },
                        new
                        {
                            Id = 42,
                            ImageId = 1,
                            Title = "Liechtenstein"
                        },
                        new
                        {
                            Id = 43,
                            ImageId = 1,
                            Title = "Paraguay"
                        },
                        new
                        {
                            Id = 44,
                            ImageId = 1,
                            Title = "Portugal"
                        },
                        new
                        {
                            Id = 45,
                            ImageId = 1,
                            Title = "Saint Vincent & Grenadines"
                        },
                        new
                        {
                            Id = 46,
                            ImageId = 1,
                            Title = "Saudi Arabia"
                        },
                        new
                        {
                            Id = 47,
                            ImageId = 1,
                            Title = "Tanzania"
                        },
                        new
                        {
                            Id = 48,
                            ImageId = 1,
                            Title = "Tonga"
                        },
                        new
                        {
                            Id = 49,
                            ImageId = 4,
                            Title = "Turkey"
                        },
                        new
                        {
                            Id = 50,
                            ImageId = 1,
                            Title = "Uganda"
                        },
                        new
                        {
                            Id = 51,
                            ImageId = 1,
                            Title = "Venezuela"
                        },
                        new
                        {
                            Id = 52,
                            ImageId = 1,
                            Title = "Argentina"
                        },
                        new
                        {
                            Id = 53,
                            ImageId = 1,
                            Title = "Azerbaijan"
                        },
                        new
                        {
                            Id = 54,
                            ImageId = 1,
                            Title = "Bhutan"
                        },
                        new
                        {
                            Id = 55,
                            ImageId = 1,
                            Title = "Burkina Faso"
                        },
                        new
                        {
                            Id = 56,
                            ImageId = 1,
                            Title = "Ivory Coast"
                        },
                        new
                        {
                            Id = 57,
                            ImageId = 1,
                            Title = "Cyprus"
                        },
                        new
                        {
                            Id = 58,
                            ImageId = 1,
                            Title = "Guadeloupe"
                        },
                        new
                        {
                            Id = 59,
                            ImageId = 1,
                            Title = "Indonesia"
                        },
                        new
                        {
                            Id = 60,
                            ImageId = 6,
                            Title = "Italy"
                        },
                        new
                        {
                            Id = 61,
                            ImageId = 1,
                            Title = "Moldova"
                        },
                        new
                        {
                            Id = 62,
                            ImageId = 1,
                            Title = "Myanmar"
                        },
                        new
                        {
                            Id = 63,
                            ImageId = 8,
                            Title = "Norway"
                        },
                        new
                        {
                            Id = 64,
                            ImageId = 7,
                            Title = "Sweden"
                        },
                        new
                        {
                            Id = 65,
                            ImageId = 1,
                            Title = "Togo"
                        },
                        new
                        {
                            Id = 66,
                            ImageId = 1,
                            Title = "Vanuatu"
                        },
                        new
                        {
                            Id = 67,
                            ImageId = 1,
                            Title = "Curaçao"
                        },
                        new
                        {
                            Id = 68,
                            ImageId = 1,
                            Title = "Bahrain"
                        },
                        new
                        {
                            Id = 69,
                            ImageId = 1,
                            Title = "Gambia"
                        },
                        new
                        {
                            Id = 70,
                            ImageId = 1,
                            Title = "Kenya"
                        },
                        new
                        {
                            Id = 71,
                            ImageId = 1,
                            Title = "Laos"
                        },
                        new
                        {
                            Id = 72,
                            ImageId = 9,
                            Title = "Spain"
                        },
                        new
                        {
                            Id = 73,
                            ImageId = 1,
                            Title = "Anguilla"
                        },
                        new
                        {
                            Id = 74,
                            ImageId = 1,
                            Title = "Dominica"
                        },
                        new
                        {
                            Id = 75,
                            ImageId = 1,
                            Title = "Mauritius"
                        },
                        new
                        {
                            Id = 76,
                            ImageId = 1,
                            Title = "Nicaragua"
                        },
                        new
                        {
                            Id = 77,
                            ImageId = 1,
                            Title = "Bolivia"
                        },
                        new
                        {
                            Id = 78,
                            ImageId = 1,
                            Title = "Colombia"
                        },
                        new
                        {
                            Id = 79,
                            ImageId = 1,
                            Title = "Croatia"
                        },
                        new
                        {
                            Id = 80,
                            ImageId = 10,
                            Title = "Greece"
                        },
                        new
                        {
                            Id = 81,
                            ImageId = 1,
                            Title = "Martinique"
                        },
                        new
                        {
                            Id = 82,
                            ImageId = 1,
                            Title = "Philippines"
                        },
                        new
                        {
                            Id = 83,
                            ImageId = 1,
                            Title = "United Kingdom"
                        },
                        new
                        {
                            Id = 84,
                            ImageId = 1,
                            Title = "St. Maarten"
                        },
                        new
                        {
                            Id = 85,
                            ImageId = 1,
                            Title = "Belize"
                        },
                        new
                        {
                            Id = 86,
                            ImageId = 1,
                            Title = "Chile"
                        },
                        new
                        {
                            Id = 87,
                            ImageId = 1,
                            Title = "Ethiopia"
                        },
                        new
                        {
                            Id = 88,
                            ImageId = 1,
                            Title = "Greenland"
                        },
                        new
                        {
                            Id = 89,
                            ImageId = 1,
                            Title = "Morocco"
                        },
                        new
                        {
                            Id = 90,
                            ImageId = 1,
                            Title = "Samoa"
                        },
                        new
                        {
                            Id = 91,
                            ImageId = 1,
                            Title = "Cambodia"
                        },
                        new
                        {
                            Id = 92,
                            ImageId = 1,
                            Title = "Cook Islands"
                        },
                        new
                        {
                            Id = 93,
                            ImageId = 1,
                            Title = "Egypt"
                        },
                        new
                        {
                            Id = 94,
                            ImageId = 1,
                            Title = "Ghana"
                        },
                        new
                        {
                            Id = 95,
                            ImageId = 1,
                            Title = "Guyana"
                        },
                        new
                        {
                            Id = 96,
                            ImageId = 1,
                            Title = "Netherlands"
                        },
                        new
                        {
                            Id = 97,
                            ImageId = 1,
                            Title = "Romania"
                        },
                        new
                        {
                            Id = 98,
                            ImageId = 1,
                            Title = "Malta"
                        },
                        new
                        {
                            Id = 99,
                            ImageId = 1,
                            Title = "Ireland"
                        },
                        new
                        {
                            Id = 100,
                            ImageId = 1,
                            Title = "Solomon Islands"
                        },
                        new
                        {
                            Id = 101,
                            ImageId = 1,
                            Title = "Taiwan"
                        },
                        new
                        {
                            Id = 102,
                            ImageId = 1,
                            Title = "Saint Martin"
                        },
                        new
                        {
                            Id = 103,
                            ImageId = 1,
                            Title = "Barbados"
                        },
                        new
                        {
                            Id = 104,
                            ImageId = 1,
                            Title = "Belgium"
                        },
                        new
                        {
                            Id = 105,
                            ImageId = 1,
                            Title = "Jamaica"
                        },
                        new
                        {
                            Id = 106,
                            ImageId = 1,
                            Title = "Maldives"
                        },
                        new
                        {
                            Id = 107,
                            ImageId = 1,
                            Title = "Switzerland"
                        },
                        new
                        {
                            Id = 108,
                            ImageId = 1,
                            Title = "Fiji"
                        },
                        new
                        {
                            Id = 109,
                            ImageId = 1,
                            Title = "South Africa"
                        },
                        new
                        {
                            Id = 110,
                            ImageId = 1,
                            Title = "Turks & Caicos Islands"
                        },
                        new
                        {
                            Id = 111,
                            ImageId = 1,
                            Title = "Bermuda"
                        },
                        new
                        {
                            Id = 112,
                            ImageId = 1,
                            Title = "El Salvador"
                        },
                        new
                        {
                            Id = 113,
                            ImageId = 11,
                            Title = "Israel"
                        },
                        new
                        {
                            Id = 114,
                            ImageId = 12,
                            Title = "Germany"
                        },
                        new
                        {
                            Id = 115,
                            ImageId = 1,
                            Title = "Monaco"
                        },
                        new
                        {
                            Id = 116,
                            ImageId = 1,
                            Title = "Qatar"
                        },
                        new
                        {
                            Id = 117,
                            ImageId = 1,
                            Title = "Thailand"
                        },
                        new
                        {
                            Id = 118,
                            ImageId = 1,
                            Title = "Dominican Republic"
                        },
                        new
                        {
                            Id = 119,
                            ImageId = 1,
                            Title = "Cayman Islands"
                        },
                        new
                        {
                            Id = 120,
                            ImageId = 1,
                            Title = "Saint Lucia"
                        },
                        new
                        {
                            Id = 121,
                            ImageId = 1,
                            Title = "Panama"
                        },
                        new
                        {
                            Id = 122,
                            ImageId = 1,
                            Title = "Vietnam"
                        },
                        new
                        {
                            Id = 123,
                            ImageId = 13,
                            Title = "France"
                        },
                        new
                        {
                            Id = 124,
                            ImageId = 1,
                            Title = "South Korea"
                        },
                        new
                        {
                            Id = 125,
                            ImageId = 1,
                            Title = "Iceland"
                        },
                        new
                        {
                            Id = 126,
                            ImageId = 1,
                            Title = "New Zealand"
                        },
                        new
                        {
                            Id = 127,
                            ImageId = 1,
                            Title = "Costa Rica"
                        },
                        new
                        {
                            Id = 128,
                            ImageId = 1,
                            Title = "Faroe Islands"
                        },
                        new
                        {
                            Id = 129,
                            ImageId = 15,
                            Title = "Canada"
                        },
                        new
                        {
                            Id = 130,
                            ImageId = 14,
                            Title = "Australia"
                        },
                        new
                        {
                            Id = 131,
                            ImageId = 1,
                            Title = "Guam"
                        },
                        new
                        {
                            Id = 132,
                            ImageId = 1,
                            Title = "U.S. Virgin Islands"
                        },
                        new
                        {
                            Id = 133,
                            ImageId = 1,
                            Title = "Bahamas"
                        },
                        new
                        {
                            Id = 134,
                            ImageId = 1,
                            Title = "Haiti"
                        },
                        new
                        {
                            Id = 135,
                            ImageId = 16,
                            Title = "Japan"
                        },
                        new
                        {
                            Id = 136,
                            ImageId = 1,
                            Title = "Aruba"
                        },
                        new
                        {
                            Id = 137,
                            ImageId = 1,
                            Title = "Puerto Rico"
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Location.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Location.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId")
                        .IsUnique()
                        .HasFilter("[CityId] IS NOT NULL");

                    b.HasIndex("ImageId");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            ImageId = 2,
                            Title = "Zanzibar"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 2,
                            ImageId = 2,
                            Title = "Ibiza"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 3,
                            ImageId = 2,
                            Title = "Bihar"
                        },
                        new
                        {
                            Id = 4,
                            CityId = 4,
                            ImageId = 2,
                            Title = "Bali"
                        },
                        new
                        {
                            Id = 5,
                            CityId = 1,
                            ImageId = 2,
                            Title = "Ras Al Khaimah"
                        },
                        new
                        {
                            Id = 6,
                            CityId = 2,
                            ImageId = 2,
                            Title = "Uttar Pradesh"
                        },
                        new
                        {
                            Id = 7,
                            CityId = 3,
                            ImageId = 2,
                            Title = "Texel"
                        },
                        new
                        {
                            Id = 8,
                            CityId = 4,
                            ImageId = 2,
                            Title = "Isle of Wight"
                        },
                        new
                        {
                            Id = 9,
                            CityId = 1,
                            ImageId = 2,
                            Title = "Jersey"
                        },
                        new
                        {
                            Id = 10,
                            CityId = 2,
                            ImageId = 2,
                            Title = "Mykonos"
                        },
                        new
                        {
                            Id = 11,
                            CityId = 3,
                            ImageId = 2,
                            Title = "Santorini"
                        },
                        new
                        {
                            Id = 12,
                            CityId = 4,
                            ImageId = 2,
                            Title = "Cornwall"
                        },
                        new
                        {
                            Id = 13,
                            CityId = 1,
                            ImageId = 2,
                            Title = "England"
                        },
                        new
                        {
                            Id = 14,
                            CityId = 2,
                            ImageId = 2,
                            Title = "Tenerife"
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EmitterId")
                        .HasColumnType("int");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("EmitterId");

                    b.HasIndex("ImageId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Payment.BookingPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AmountInUSD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountInUserCurrency")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CancellationPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DamageDeposit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ResortFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TAX")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("BookingPrices");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Payment.CreditCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CVC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("CardTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Cardholder")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CardTypeId");

                    b.ToTable("CreditCards");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Payment.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreditCardId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreditCardId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.PromoCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("GeneratingDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("PercentDiscount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PromoCodes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "test",
                            ExpirationDate = new DateTime(2022, 4, 17, 19, 43, 28, 815, DateTimeKind.Utc).AddTicks(635),
                            GeneratingDate = new DateTime(2022, 4, 15, 19, 43, 28, 815, DateTimeKind.Utc).AddTicks(625),
                            IsActive = true,
                            PercentDiscount = 20
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Review.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<long>("DislikesAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<double>("Grade")
                        .HasColumnType("float");

                    b.Property<long>("LikesAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<int>("ReviewMessageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SuggestionId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReviewMessageId")
                        .IsUnique();

                    b.HasIndex("SuggestionId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Review.ReviewCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int?>("SuggestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SuggestionId");

                    b.ToTable("ReviewCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Staff"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Facilities"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Cleanliness"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Comfort"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Value for money"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Location"
                        },
                        new
                        {
                            Id = 7,
                            Category = "Free WiFi"
                        },
                        new
                        {
                            Id = 8,
                            Category = "Pets allowed"
                        },
                        new
                        {
                            Id = 9,
                            Category = "Air conditioning"
                        },
                        new
                        {
                            Id = 10,
                            Category = "Private bathroom"
                        },
                        new
                        {
                            Id = 11,
                            Category = "City view"
                        },
                        new
                        {
                            Id = 12,
                            Category = "Private bathroom"
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "user"
                        },
                        new
                        {
                            Id = 3,
                            Name = "temp user"
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.ServiceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("ServiceCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Stays"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Flights"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Car rentals"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Attractions"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Airport taxis"
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Services.AirportTaxiBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("UserId");

                    b.ToTable("AirportTaxiBookings");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Services.AttractionBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("UserId");

                    b.ToTable("AttractionBookings");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Services.CarRentalBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("UserId");

                    b.ToTable("CarRentalBookings");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.StayBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BookingCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForWork")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRequestedAirportShuttle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRequestedRentingCar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int>("PriceId")
                        .HasColumnType("int");

                    b.Property<string>("PromoCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("ServiceCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialRequests")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("SuggestionId")
                        .HasColumnType("int");

                    b.Property<string>("UniqueNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("BookingCategoryId");

                    b.HasIndex("CartId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PriceId")
                        .IsUnique();

                    b.HasIndex("ServiceCategoryId");

                    b.HasIndex("SuggestionId");

                    b.HasIndex("UserId");

                    b.ToTable("StayBookings");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsSmokingAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuite")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("PriceInUSD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceInUserCurrency")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RoomSize")
                        .HasColumnType("int");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Sleeps")
                        .HasColumnType("int");

                    b.Property<int?>("StayBookingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomTypeId");

                    b.HasIndex("StayBookingId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Test description for room 1",
                            IsSmokingAllowed = false,
                            IsSuite = true,
                            PriceInUSD = 54m,
                            PriceInUserCurrency = 850m,
                            RoomSize = 25,
                            RoomTypeId = 1,
                            Sleeps = 2
                        },
                        new
                        {
                            Id = 2,
                            Description = "Test description for room 1",
                            IsSmokingAllowed = true,
                            IsSuite = false,
                            PriceInUSD = 85m,
                            PriceInUserCurrency = 4200m,
                            RoomSize = 30,
                            RoomTypeId = 2,
                            Sleeps = 3
                        },
                        new
                        {
                            Id = 3,
                            Description = "Test description for room 1",
                            IsSmokingAllowed = false,
                            IsSuite = true,
                            PriceInUSD = 15m,
                            PriceInUserCurrency = 305m,
                            RoomSize = 35,
                            RoomTypeId = 3,
                            Sleeps = 5
                        },
                        new
                        {
                            Id = 4,
                            Description = "Test description for room 1",
                            IsSmokingAllowed = true,
                            IsSuite = false,
                            PriceInUSD = 74m,
                            PriceInUserCurrency = 1220m,
                            RoomSize = 45,
                            RoomTypeId = 4,
                            Sleeps = 4
                        },
                        new
                        {
                            Id = 5,
                            Description = "Test description for room 1",
                            IsSmokingAllowed = false,
                            IsSuite = false,
                            PriceInUSD = 80m,
                            PriceInUserCurrency = 3890m,
                            RoomSize = 15,
                            RoomTypeId = 5,
                            Sleeps = 1
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Small Double Room"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Standard Double Room"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Standard Twin Room"
                        },
                        new
                        {
                            Id = 4,
                            Title = "Superior Twin Room"
                        },
                        new
                        {
                            Id = 5,
                            Title = "Studio"
                        },
                        new
                        {
                            Id = 6,
                            Title = "Standard Quadruple Room"
                        },
                        new
                        {
                            Id = 7,
                            Title = "Apartment"
                        },
                        new
                        {
                            Id = 8,
                            Title = "Double Room with Balcony"
                        },
                        new
                        {
                            Id = 9,
                            Title = "Double Room with Extra Bed"
                        },
                        new
                        {
                            Id = 10,
                            Title = "Contempo Double Room"
                        },
                        new
                        {
                            Id = 11,
                            Title = "Double Room"
                        },
                        new
                        {
                            Id = 12,
                            Title = "Deluxe Double Room"
                        },
                        new
                        {
                            Id = 13,
                            Title = "Classic Suite"
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.Suggestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("BookingCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsParkingAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Progress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("ServiceCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("StarsRating")
                        .HasColumnType("int");

                    b.Property<string>("UniqueCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("BookingCategoryId");

                    b.HasIndex("ServiceCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Suggestions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            BookingCategoryId = 1,
                            Description = "Test description of test suggestion 1",
                            IsParkingAvailable = true,
                            Name = "Arcadia apartment & sea terrace",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            BookingCategoryId = 2,
                            Description = "Test description of test suggestion 2",
                            IsParkingAvailable = false,
                            Name = "5 room apartment",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 3,
                            BookingCategoryId = 3,
                            Description = "Test description of test suggestion 3",
                            IsParkingAvailable = true,
                            Name = "Baron ApartHotel",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            AddressId = 4,
                            BookingCategoryId = 4,
                            Description = "Test description of test suggestion 4",
                            IsParkingAvailable = true,
                            Name = "Bon Apart",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            AddressId = 1,
                            BookingCategoryId = 5,
                            Description = "Test description of test suggestion 5",
                            IsParkingAvailable = false,
                            Name = "Plaza Arcadia Apartments",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            AddressId = 1,
                            BookingCategoryId = 1,
                            Description = "Test description of test suggestion 6",
                            IsParkingAvailable = true,
                            Name = "New apartments in Arcadia sea view",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            AddressId = 2,
                            BookingCategoryId = 2,
                            Description = "Test description of test suggestion 7",
                            IsParkingAvailable = false,
                            Name = "Royal Loft Primorskiy Boulevard",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 8,
                            AddressId = 3,
                            BookingCategoryId = 3,
                            Description = "Test description of test suggestion 8",
                            IsParkingAvailable = true,
                            Name = "Kvartira u samogo moria (GREEN)!",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 3
                        },
                        new
                        {
                            Id = 9,
                            AddressId = 4,
                            BookingCategoryId = 4,
                            Description = "Test description of test suggestion 9",
                            IsParkingAvailable = true,
                            Name = "Royal Arcadia Apartment",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 10,
                            AddressId = 1,
                            BookingCategoryId = 5,
                            Description = "Test description of test suggestion 10",
                            IsParkingAvailable = false,
                            Name = "City Rooms Apartments",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 11,
                            AddressId = 1,
                            BookingCategoryId = 1,
                            Description = "Test description of test suggestion 11",
                            IsParkingAvailable = true,
                            Name = "RainBow Arkadia Apartment",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 12,
                            AddressId = 2,
                            BookingCategoryId = 2,
                            Description = "Test description of test suggestion 12",
                            IsParkingAvailable = false,
                            Name = "Rishelyevskiy",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 13,
                            AddressId = 3,
                            BookingCategoryId = 3,
                            Description = "Test description of test suggestion 13",
                            IsParkingAvailable = true,
                            Name = "Lift Hotel Boutique",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 3
                        },
                        new
                        {
                            Id = 14,
                            AddressId = 4,
                            BookingCategoryId = 4,
                            Description = "Test description of test suggestion 14",
                            IsParkingAvailable = true,
                            Name = "Odessa Heart",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 15,
                            AddressId = 1,
                            BookingCategoryId = 5,
                            Description = "Test description of test suggestion 15",
                            IsParkingAvailable = false,
                            Name = "Elegia ArCadia Apartments",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 16,
                            AddressId = 1,
                            BookingCategoryId = 1,
                            Description = "Test description of test suggestion 16",
                            IsParkingAvailable = true,
                            Name = "Inn Kyiv",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 17,
                            AddressId = 2,
                            BookingCategoryId = 2,
                            Description = "Test description of test suggestion 17",
                            IsParkingAvailable = false,
                            Name = "Boutique Apart-Hotel Sherborne",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 18,
                            AddressId = 3,
                            BookingCategoryId = 3,
                            Description = "Test description of test suggestion 18",
                            IsParkingAvailable = true,
                            Name = "Na Podole Apartment",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 3
                        },
                        new
                        {
                            Id = 19,
                            AddressId = 4,
                            BookingCategoryId = 4,
                            Description = "Test description of test suggestion 19",
                            IsParkingAvailable = true,
                            Name = "Centre nigh Mariinsky Park Palace",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 20,
                            AddressId = 1,
                            BookingCategoryId = 5,
                            Description = "Test description of test suggestion 20",
                            IsParkingAvailable = false,
                            Name = "Apartment On Khreshchatyk 21",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 21,
                            AddressId = 1,
                            BookingCategoryId = 1,
                            Description = "Test description of test suggestion 21",
                            IsParkingAvailable = true,
                            Name = "Hotel Lime",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 22,
                            AddressId = 2,
                            BookingCategoryId = 2,
                            Description = "Test description of test suggestion 22",
                            IsParkingAvailable = false,
                            Name = "Apartment in Khreshchatyk Passage",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 23,
                            AddressId = 3,
                            BookingCategoryId = 3,
                            Description = "Test description of test suggestion 23",
                            IsParkingAvailable = true,
                            Name = "Cosy central ApartmentOpens in new window",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 3
                        },
                        new
                        {
                            Id = 24,
                            AddressId = 4,
                            BookingCategoryId = 4,
                            Description = "Test description of test suggestion 24",
                            IsParkingAvailable = true,
                            Name = "Alex Apartments on Lva Tolstogo",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 25,
                            AddressId = 1,
                            BookingCategoryId = 5,
                            Description = "Test description of test suggestion 25",
                            IsParkingAvailable = false,
                            Name = "Real Home Apartments",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 26,
                            AddressId = 1,
                            BookingCategoryId = 1,
                            Description = "Test description of test suggestion 26",
                            IsParkingAvailable = true,
                            Name = "Hotel \"Mandarin Clubhouse\"",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 27,
                            AddressId = 2,
                            BookingCategoryId = 2,
                            Description = "Test description of test suggestion 27",
                            IsParkingAvailable = false,
                            Name = "Bloom Hotel",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 28,
                            AddressId = 3,
                            BookingCategoryId = 3,
                            Description = "Test description of test suggestion 28",
                            IsParkingAvailable = true,
                            Name = "Apartment on Sumskaya 46 \"Family\"",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 3
                        },
                        new
                        {
                            Id = 29,
                            AddressId = 4,
                            BookingCategoryId = 4,
                            Description = "Test description of test suggestion 29",
                            IsParkingAvailable = true,
                            Name = "Ameritania at Times Square",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 30,
                            AddressId = 1,
                            BookingCategoryId = 5,
                            Description = "Test description of test suggestion 30",
                            IsParkingAvailable = false,
                            Name = "Ace Hotel New York",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 31,
                            AddressId = 1,
                            BookingCategoryId = 1,
                            Description = "Test description of test suggestion 31",
                            IsParkingAvailable = true,
                            Name = "NH Collection New York Madison Avenue",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 32,
                            AddressId = 2,
                            BookingCategoryId = 2,
                            Description = "Test description of test suggestion 32",
                            IsParkingAvailable = false,
                            Name = "Freehand New York",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 33,
                            AddressId = 3,
                            BookingCategoryId = 3,
                            Description = "Test description of test suggestion 33",
                            IsParkingAvailable = true,
                            Name = "Riu Plaza Manhattan Times Square",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 3
                        },
                        new
                        {
                            Id = 34,
                            AddressId = 4,
                            BookingCategoryId = 4,
                            Description = "Test description of test suggestion 34",
                            IsParkingAvailable = true,
                            Name = "Royalton New York",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 35,
                            AddressId = 1,
                            BookingCategoryId = 5,
                            Description = "Test description of test suggestion 35",
                            IsParkingAvailable = false,
                            Name = "Hyatt Place New York City/Times Square",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 36,
                            AddressId = 1,
                            BookingCategoryId = 1,
                            Description = "Test description of test suggestion 36",
                            IsParkingAvailable = true,
                            Name = "Row NYC at Times Square",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 37,
                            AddressId = 2,
                            BookingCategoryId = 2,
                            Description = "Test description of test suggestion 37",
                            IsParkingAvailable = false,
                            Name = "The New Yorker, A Wyndham Hotel",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 38,
                            AddressId = 3,
                            BookingCategoryId = 3,
                            Description = "Test description of test suggestion 38",
                            IsParkingAvailable = true,
                            Name = "Motto by Hilton New York City Chelsea",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 3
                        },
                        new
                        {
                            Id = 39,
                            AddressId = 4,
                            BookingCategoryId = 4,
                            Description = "Test description of test suggestion 39",
                            IsParkingAvailable = true,
                            Name = "Element Times Square West",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 40,
                            AddressId = 1,
                            BookingCategoryId = 5,
                            Description = "Test description of test suggestion 40",
                            IsParkingAvailable = false,
                            Name = "Doubletree By Hilton New York Times Square West",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 41,
                            AddressId = 1,
                            BookingCategoryId = 1,
                            Description = "Test description of test suggestion 41",
                            IsParkingAvailable = true,
                            Name = "Pod Times Square",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 42,
                            AddressId = 2,
                            BookingCategoryId = 2,
                            Description = "Test description of test suggestion 42",
                            IsParkingAvailable = false,
                            Name = "DoubleTree by Hilton New York Downtown",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 43,
                            AddressId = 3,
                            BookingCategoryId = 3,
                            Description = "Test description of test suggestion 43",
                            IsParkingAvailable = true,
                            Name = "Holiday Inn Express - Times Square South, an IHG Hotel",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 3
                        },
                        new
                        {
                            Id = 44,
                            AddressId = 4,
                            BookingCategoryId = 4,
                            Description = "Test description of test suggestion 44",
                            IsParkingAvailable = true,
                            Name = "West Side YMCA",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 45,
                            AddressId = 1,
                            BookingCategoryId = 5,
                            Description = "Test description of test suggestion 45",
                            IsParkingAvailable = false,
                            Name = "Hotel Edison Times Square",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 46,
                            AddressId = 1,
                            BookingCategoryId = 1,
                            Description = "Test description of test suggestion 46",
                            IsParkingAvailable = true,
                            Name = "The Carvi Hotel New York, Ascend Hotel Collection",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 47,
                            AddressId = 2,
                            BookingCategoryId = 2,
                            Description = "Test description of test suggestion 47",
                            IsParkingAvailable = false,
                            Name = "Riu Plaza New York Times Square",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 48,
                            AddressId = 3,
                            BookingCategoryId = 3,
                            Description = "Test description of test suggestion 48",
                            IsParkingAvailable = true,
                            Name = "Pod 51",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 3
                        },
                        new
                        {
                            Id = 49,
                            AddressId = 4,
                            BookingCategoryId = 4,
                            Description = "Test description of test suggestion 49",
                            IsParkingAvailable = true,
                            Name = "Arlo Midtown",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 50,
                            AddressId = 1,
                            BookingCategoryId = 5,
                            Description = "Test description of test suggestion 50",
                            IsParkingAvailable = false,
                            Name = "Courtyard by Marriott New York Manhattan/Chelsea",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 51,
                            AddressId = 1,
                            BookingCategoryId = 1,
                            Description = "Test description of test suggestion 51",
                            IsParkingAvailable = true,
                            Name = "SpringHill Suites by Marriott New York Manhattan Chelsea",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 52,
                            AddressId = 2,
                            BookingCategoryId = 2,
                            Description = "Test description of test suggestion 52",
                            IsParkingAvailable = false,
                            Name = "MADE Hotel",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 53,
                            AddressId = 3,
                            BookingCategoryId = 3,
                            Description = "Test description of test suggestion 53",
                            IsParkingAvailable = true,
                            Name = "Sheraton Tribeca New York Hotel",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 3
                        },
                        new
                        {
                            Id = 54,
                            AddressId = 4,
                            BookingCategoryId = 4,
                            Description = "Test description of test suggestion 54",
                            IsParkingAvailable = true,
                            Name = "Hotel Normandie - Los Angeles",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 55,
                            AddressId = 1,
                            BookingCategoryId = 5,
                            Description = "Test description of test suggestion 55",
                            IsParkingAvailable = false,
                            Name = "La Quinta by Wyndham LAX",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 56,
                            AddressId = 1,
                            BookingCategoryId = 1,
                            Description = "Test description of test suggestion 56",
                            IsParkingAvailable = true,
                            Name = "Los Angeles Airport Marriott",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 57,
                            AddressId = 2,
                            BookingCategoryId = 2,
                            Description = "Test description of test suggestion 57",
                            IsParkingAvailable = false,
                            Name = "Magic Castle Hotel",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 58,
                            AddressId = 3,
                            BookingCategoryId = 3,
                            Description = "Test description of test suggestion 58",
                            IsParkingAvailable = true,
                            Name = "Holiday Inn Los Angeles - LAX Airport, an IHG Hotel",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 3
                        },
                        new
                        {
                            Id = 59,
                            AddressId = 4,
                            BookingCategoryId = 4,
                            Description = "Test description of test suggestion 59",
                            IsParkingAvailable = true,
                            Name = "citizenM Los Angeles Downtown",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 60,
                            AddressId = 1,
                            BookingCategoryId = 5,
                            Description = "Test description of test suggestion 60",
                            IsParkingAvailable = false,
                            Name = "Four Points by Sheraton Los Angeles Westside",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 61,
                            AddressId = 1,
                            BookingCategoryId = 1,
                            Description = "Test description of test suggestion 61",
                            IsParkingAvailable = true,
                            Name = "Andaz West Hollywood-a concept by Hyatt",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 62,
                            AddressId = 2,
                            BookingCategoryId = 2,
                            Description = "Test description of test suggestion 62",
                            IsParkingAvailable = false,
                            Name = "Four Points by Sheraton Los Angeles International Airport",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 63,
                            AddressId = 3,
                            BookingCategoryId = 3,
                            Description = "Test description of test suggestion 63",
                            IsParkingAvailable = true,
                            Name = "The Hollywood Roosevelt",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 3
                        },
                        new
                        {
                            Id = 64,
                            AddressId = 4,
                            BookingCategoryId = 4,
                            Description = "Test description of test suggestion 64",
                            IsParkingAvailable = true,
                            Name = "The Westin Los Angeles Airport",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 65,
                            AddressId = 1,
                            BookingCategoryId = 5,
                            Description = "Test description of test suggestion 65",
                            IsParkingAvailable = false,
                            Name = "Hilton Los Angeles Airport",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 66,
                            AddressId = 1,
                            BookingCategoryId = 1,
                            Description = "Test description of test suggestion 66",
                            IsParkingAvailable = true,
                            Name = "Hilton Santa Monica",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 67,
                            AddressId = 2,
                            BookingCategoryId = 2,
                            Description = "Test description of test suggestion 67",
                            IsParkingAvailable = false,
                            Name = "Sonesta Los Angeles Airport LAX",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 68,
                            AddressId = 3,
                            BookingCategoryId = 3,
                            Description = "Test description of test suggestion 68",
                            IsParkingAvailable = true,
                            Name = "Beverly Laurel Hotel",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 3
                        },
                        new
                        {
                            Id = 69,
                            AddressId = 4,
                            BookingCategoryId = 4,
                            Description = "Test description of test suggestion 69",
                            IsParkingAvailable = true,
                            Name = "Hollywood Inn Express South",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 70,
                            AddressId = 1,
                            BookingCategoryId = 5,
                            Description = "Test description of test suggestion 70",
                            IsParkingAvailable = false,
                            Name = "Hotel Erwin",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 71,
                            AddressId = 1,
                            BookingCategoryId = 1,
                            Description = "Test description of test suggestion 71",
                            IsParkingAvailable = true,
                            Name = "Sheraton Universal",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 72,
                            AddressId = 2,
                            BookingCategoryId = 2,
                            Description = "Test description of test suggestion 72",
                            IsParkingAvailable = false,
                            Name = "AIR Venice on the Beach",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 73,
                            AddressId = 3,
                            BookingCategoryId = 3,
                            Description = "Test description of test suggestion 73",
                            IsParkingAvailable = true,
                            Name = "Hotel Aventura",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 3
                        },
                        new
                        {
                            Id = 74,
                            AddressId = 4,
                            BookingCategoryId = 4,
                            Description = "Test description of test suggestion 74",
                            IsParkingAvailable = true,
                            Name = "Ramada by Wyndham Los Angeles/Wilshire Center",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 75,
                            AddressId = 1,
                            BookingCategoryId = 5,
                            Description = "Test description of test suggestion 75",
                            IsParkingAvailable = false,
                            Name = "Thompson Hollywood",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 76,
                            AddressId = 1,
                            BookingCategoryId = 1,
                            Description = "Test description of test suggestion 76",
                            IsParkingAvailable = true,
                            Name = "1 Hotel West Hollywood",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 77,
                            AddressId = 2,
                            BookingCategoryId = 2,
                            Description = "Test description of test suggestion 77",
                            IsParkingAvailable = false,
                            Name = "Beverly Hills Marriott",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 78,
                            AddressId = 3,
                            BookingCategoryId = 3,
                            Description = "Test description of test suggestion 78",
                            IsParkingAvailable = true,
                            Name = "Avenue Hotel, Ascend Hotel Collection",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 3
                        },
                        new
                        {
                            Id = 79,
                            AddressId = 4,
                            BookingCategoryId = 4,
                            Description = "Test description of test suggestion 79",
                            IsParkingAvailable = true,
                            Name = "Hilton Chicago Magnificent Mile Suites",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 80,
                            AddressId = 1,
                            BookingCategoryId = 5,
                            Description = "Test description of test suggestion 80",
                            IsParkingAvailable = false,
                            Name = "Kasa Chicago South Loop",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 81,
                            AddressId = 1,
                            BookingCategoryId = 1,
                            Description = "Test description of test suggestion 81",
                            IsParkingAvailable = true,
                            Name = "Home2 Suites By Hilton Chicago River North",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 82,
                            AddressId = 2,
                            BookingCategoryId = 2,
                            Description = "Test description of test suggestion 82",
                            IsParkingAvailable = false,
                            Name = "Level Chicago - Old Town",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 83,
                            AddressId = 3,
                            BookingCategoryId = 3,
                            Description = "Test description of test suggestion 83",
                            IsParkingAvailable = true,
                            Name = "Hotel Felix",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 3
                        },
                        new
                        {
                            Id = 84,
                            AddressId = 4,
                            BookingCategoryId = 4,
                            Description = "Test description of test suggestion 84",
                            IsParkingAvailable = true,
                            Name = "Sonder South Wabash",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 85,
                            AddressId = 1,
                            BookingCategoryId = 5,
                            Description = "Test description of test suggestion 85",
                            IsParkingAvailable = false,
                            Name = "Club Quarters Hotel Central Loop, Chicago",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 86,
                            AddressId = 1,
                            BookingCategoryId = 1,
                            Description = "Test description of test suggestion 86",
                            IsParkingAvailable = true,
                            Name = "Pendry Chicago",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 87,
                            AddressId = 2,
                            BookingCategoryId = 2,
                            Description = "Test description of test suggestion 87",
                            IsParkingAvailable = false,
                            Name = "River Hotel",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 88,
                            AddressId = 3,
                            BookingCategoryId = 3,
                            Description = "Test description of test suggestion 88",
                            IsParkingAvailable = true,
                            Name = "Hotel Julian Chicago",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 3
                        },
                        new
                        {
                            Id = 89,
                            AddressId = 4,
                            BookingCategoryId = 4,
                            Description = "Test description of test suggestion 89",
                            IsParkingAvailable = true,
                            Name = "Homewood Suites by Hilton Chicago-Downtown",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 90,
                            AddressId = 1,
                            BookingCategoryId = 5,
                            Description = "Test description of test suggestion 90",
                            IsParkingAvailable = false,
                            Name = "Central Loop Hotel",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 91,
                            AddressId = 1,
                            BookingCategoryId = 1,
                            Description = "Test description of test suggestion 91",
                            IsParkingAvailable = true,
                            Name = "Selina Chicago",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 92,
                            AddressId = 2,
                            BookingCategoryId = 2,
                            Description = "Test description of test suggestion 92",
                            IsParkingAvailable = false,
                            Name = "Warwick Allerton Chicago",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 93,
                            AddressId = 3,
                            BookingCategoryId = 3,
                            Description = "Test description of test suggestion 93",
                            IsParkingAvailable = true,
                            Name = "La Quinta by Wyndham Chicago Downtown",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 3
                        },
                        new
                        {
                            Id = 94,
                            AddressId = 4,
                            BookingCategoryId = 4,
                            Description = "Test description of test suggestion 94",
                            IsParkingAvailable = true,
                            Name = "Congress Plaza Hotel Chicago",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 95,
                            AddressId = 1,
                            BookingCategoryId = 5,
                            Description = "Test description of test suggestion 95",
                            IsParkingAvailable = false,
                            Name = "Sonder The Plymouth",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 96,
                            AddressId = 1,
                            BookingCategoryId = 1,
                            Description = "Test description of test suggestion 96",
                            IsParkingAvailable = true,
                            Name = "Cambria Hotel Chicago Loop/Theatre District",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 97,
                            AddressId = 2,
                            BookingCategoryId = 2,
                            Description = "Test description of test suggestion 97",
                            IsParkingAvailable = false,
                            Name = "The Talbott Hotel",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 98,
                            AddressId = 3,
                            BookingCategoryId = 3,
                            Description = "Test description of test suggestion 98",
                            IsParkingAvailable = true,
                            Name = "Sonder at Grant Park",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 3
                        },
                        new
                        {
                            Id = 99,
                            AddressId = 4,
                            BookingCategoryId = 4,
                            Description = "Test description of test suggestion 99",
                            IsParkingAvailable = true,
                            Name = "Hotel Blake, an Ascend Hotel Collection Member",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 100,
                            AddressId = 1,
                            BookingCategoryId = 5,
                            Description = "Test description of test suggestion 100",
                            IsParkingAvailable = false,
                            Name = "The St. Clair Hotel - Magnificent Mile",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 101,
                            AddressId = 1,
                            BookingCategoryId = 1,
                            Description = "Test description of test suggestion 101",
                            IsParkingAvailable = true,
                            Name = "Aloft Chicago Mag Mile",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 102,
                            AddressId = 2,
                            BookingCategoryId = 2,
                            Description = "Test description of test suggestion 102",
                            IsParkingAvailable = false,
                            Name = "Paddler's Lane Retreat",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 103,
                            AddressId = 3,
                            BookingCategoryId = 3,
                            Description = "Test description of test suggestion 103",
                            IsParkingAvailable = true,
                            Name = "The Lodge at Chalk Hill",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 3
                        },
                        new
                        {
                            Id = 104,
                            AddressId = 4,
                            BookingCategoryId = 4,
                            Description = "Test description of test suggestion 104",
                            IsParkingAvailable = true,
                            Name = "Tentrr Signature Site - Trout Meadow",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 105,
                            AddressId = 1,
                            BookingCategoryId = 5,
                            Description = "Test description of test suggestion 105",
                            IsParkingAvailable = false,
                            Name = "Microtel Inn & Suites by Wyndham Hazelton/Bruceton Mills",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 106,
                            AddressId = 1,
                            BookingCategoryId = 1,
                            Description = "Test description of test suggestion 106",
                            IsParkingAvailable = true,
                            Name = "Cozy Southwind Seven Springs Home, Ski-In and Ski-Out!",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 107,
                            AddressId = 2,
                            BookingCategoryId = 2,
                            Description = "Test description of test suggestion 107",
                            IsParkingAvailable = false,
                            Name = "Pristine Resort Townhome 2 Mi to Seven Springs Mtn",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 108,
                            AddressId = 3,
                            BookingCategoryId = 3,
                            Description = "Test description of test suggestion 108",
                            IsParkingAvailable = true,
                            Name = "Swiss Mtn Condo 3 Mi to Seven Springs Resort",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 3
                        },
                        new
                        {
                            Id = 109,
                            AddressId = 4,
                            BookingCategoryId = 4,
                            Description = "Test description of test suggestion 109",
                            IsParkingAvailable = true,
                            Name = "The St Gregory Hotel Dupont Circle Georgetown",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 110,
                            AddressId = 1,
                            BookingCategoryId = 5,
                            Description = "Test description of test suggestion 110",
                            IsParkingAvailable = false,
                            Name = "Hotel Zena, a Viceroy Urban Retreat",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 111,
                            AddressId = 1,
                            BookingCategoryId = 1,
                            Description = "Test description of test suggestion 111",
                            IsParkingAvailable = true,
                            Name = "Riggs Washington DC",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 112,
                            AddressId = 2,
                            BookingCategoryId = 2,
                            Description = "Test description of test suggestion 112",
                            IsParkingAvailable = false,
                            Name = "Club Quarters Hotel White House, Washington DC",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 113,
                            AddressId = 3,
                            BookingCategoryId = 3,
                            Description = "Test description of test suggestion 113",
                            IsParkingAvailable = true,
                            Name = "Hotel Harrington",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 3
                        },
                        new
                        {
                            Id = 114,
                            AddressId = 4,
                            BookingCategoryId = 4,
                            Description = "Test description of test suggestion 114",
                            IsParkingAvailable = true,
                            Name = "Beacon Hotel & Corporate Quarters",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 115,
                            AddressId = 1,
                            BookingCategoryId = 5,
                            Description = "Test description of test suggestion 115",
                            IsParkingAvailable = false,
                            Name = "Hotel Lombardy",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 116,
                            AddressId = 1,
                            BookingCategoryId = 1,
                            Description = "Test description of test suggestion 116",
                            IsParkingAvailable = true,
                            Name = "Wyndham Garden Washington DC North",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 117,
                            AddressId = 2,
                            BookingCategoryId = 2,
                            Description = "Test description of test suggestion 117",
                            IsParkingAvailable = false,
                            Name = "Hyatt Place Washington DC/US Capitol",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 118,
                            AddressId = 3,
                            BookingCategoryId = 3,
                            Description = "Test description of test suggestion 118",
                            IsParkingAvailable = true,
                            Name = "Courtyard by Marriott Washington, DC Dupont Circle",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 3
                        },
                        new
                        {
                            Id = 119,
                            AddressId = 4,
                            BookingCategoryId = 4,
                            Description = "Test description of test suggestion 119",
                            IsParkingAvailable = true,
                            Name = "The Architect",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 120,
                            AddressId = 1,
                            BookingCategoryId = 5,
                            Description = "Test description of test suggestion 120",
                            IsParkingAvailable = false,
                            Name = "The Baron Hotel",
                            Progress = 100,
                            ServiceCategoryId = 1,
                            StarsRating = 5,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.SuggestionHighlight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("FileId")
                        .HasColumnType("int");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<int?>("RoomTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SuggestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("RoomId");

                    b.HasIndex("RoomTypeId");

                    b.HasIndex("SuggestionId");

                    b.ToTable("SuggestionHighlights");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.SuggestionReviewGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ReviewCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("SuggestionId")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasMaxLength(10)
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ReviewCategoryId");

                    b.HasIndex("SuggestionId");

                    b.ToTable("SuggestionReviewGrades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ReviewCategoryId = 1,
                            SuggestionId = 1,
                            Value = 10.0
                        },
                        new
                        {
                            Id = 2,
                            ReviewCategoryId = 2,
                            SuggestionId = 2,
                            Value = 7.0
                        },
                        new
                        {
                            Id = 3,
                            ReviewCategoryId = 3,
                            SuggestionId = 3,
                            Value = 6.0
                        },
                        new
                        {
                            Id = 4,
                            ReviewCategoryId = 4,
                            SuggestionId = 4,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 5,
                            ReviewCategoryId = 5,
                            SuggestionId = 5,
                            Value = 6.0
                        },
                        new
                        {
                            Id = 6,
                            ReviewCategoryId = 6,
                            SuggestionId = 1,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 7,
                            ReviewCategoryId = 7,
                            SuggestionId = 2,
                            Value = 6.0
                        },
                        new
                        {
                            Id = 8,
                            ReviewCategoryId = 8,
                            SuggestionId = 3,
                            Value = 3.0
                        },
                        new
                        {
                            Id = 9,
                            ReviewCategoryId = 9,
                            SuggestionId = 4,
                            Value = 8.0
                        },
                        new
                        {
                            Id = 10,
                            ReviewCategoryId = 10,
                            SuggestionId = 5,
                            Value = 5.0
                        },
                        new
                        {
                            Id = 11,
                            ReviewCategoryId = 11,
                            SuggestionId = 1,
                            Value = 10.0
                        },
                        new
                        {
                            Id = 12,
                            ReviewCategoryId = 12,
                            SuggestionId = 2,
                            Value = 5.0
                        },
                        new
                        {
                            Id = 13,
                            ReviewCategoryId = 1,
                            SuggestionId = 3,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 14,
                            ReviewCategoryId = 2,
                            SuggestionId = 4,
                            Value = 7.0
                        },
                        new
                        {
                            Id = 15,
                            ReviewCategoryId = 3,
                            SuggestionId = 5,
                            Value = 6.0
                        },
                        new
                        {
                            Id = 16,
                            ReviewCategoryId = 4,
                            SuggestionId = 1,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 17,
                            ReviewCategoryId = 5,
                            SuggestionId = 2,
                            Value = 6.0
                        },
                        new
                        {
                            Id = 18,
                            ReviewCategoryId = 6,
                            SuggestionId = 3,
                            Value = 4.0
                        },
                        new
                        {
                            Id = 19,
                            ReviewCategoryId = 7,
                            SuggestionId = 4,
                            Value = 6.0
                        },
                        new
                        {
                            Id = 20,
                            ReviewCategoryId = 8,
                            SuggestionId = 5,
                            Value = 3.0
                        },
                        new
                        {
                            Id = 21,
                            ReviewCategoryId = 9,
                            SuggestionId = 1,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 22,
                            ReviewCategoryId = 10,
                            SuggestionId = 2,
                            Value = 5.0
                        },
                        new
                        {
                            Id = 23,
                            ReviewCategoryId = 11,
                            SuggestionId = 3,
                            Value = 7.0
                        },
                        new
                        {
                            Id = 24,
                            ReviewCategoryId = 12,
                            SuggestionId = 4,
                            Value = 5.0
                        },
                        new
                        {
                            Id = 25,
                            ReviewCategoryId = 1,
                            SuggestionId = 5,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 26,
                            ReviewCategoryId = 2,
                            SuggestionId = 1,
                            Value = 10.0
                        },
                        new
                        {
                            Id = 27,
                            ReviewCategoryId = 3,
                            SuggestionId = 2,
                            Value = 6.0
                        },
                        new
                        {
                            Id = 28,
                            ReviewCategoryId = 4,
                            SuggestionId = 3,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 29,
                            ReviewCategoryId = 5,
                            SuggestionId = 4,
                            Value = 6.0
                        },
                        new
                        {
                            Id = 30,
                            ReviewCategoryId = 6,
                            SuggestionId = 5,
                            Value = 4.0
                        },
                        new
                        {
                            Id = 31,
                            ReviewCategoryId = 7,
                            SuggestionId = 1,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 32,
                            ReviewCategoryId = 8,
                            SuggestionId = 2,
                            Value = 3.0
                        },
                        new
                        {
                            Id = 33,
                            ReviewCategoryId = 9,
                            SuggestionId = 3,
                            Value = 8.0
                        },
                        new
                        {
                            Id = 34,
                            ReviewCategoryId = 10,
                            SuggestionId = 4,
                            Value = 5.0
                        },
                        new
                        {
                            Id = 35,
                            ReviewCategoryId = 11,
                            SuggestionId = 5,
                            Value = 7.0
                        },
                        new
                        {
                            Id = 36,
                            ReviewCategoryId = 12,
                            SuggestionId = 1,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 37,
                            ReviewCategoryId = 6,
                            SuggestionId = 42,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 38,
                            ReviewCategoryId = 7,
                            SuggestionId = 42,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 39,
                            ReviewCategoryId = 8,
                            SuggestionId = 42,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 40,
                            ReviewCategoryId = 9,
                            SuggestionId = 42,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 41,
                            ReviewCategoryId = 10,
                            SuggestionId = 42,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 42,
                            ReviewCategoryId = 11,
                            SuggestionId = 42,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 43,
                            ReviewCategoryId = 12,
                            SuggestionId = 42,
                            Value = 10.0
                        },
                        new
                        {
                            Id = 44,
                            ReviewCategoryId = 6,
                            SuggestionId = 43,
                            Value = 10.0
                        },
                        new
                        {
                            Id = 45,
                            ReviewCategoryId = 7,
                            SuggestionId = 43,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 46,
                            ReviewCategoryId = 8,
                            SuggestionId = 43,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 47,
                            ReviewCategoryId = 9,
                            SuggestionId = 43,
                            Value = 10.0
                        },
                        new
                        {
                            Id = 48,
                            ReviewCategoryId = 10,
                            SuggestionId = 43,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 49,
                            ReviewCategoryId = 11,
                            SuggestionId = 43,
                            Value = 10.0
                        },
                        new
                        {
                            Id = 50,
                            ReviewCategoryId = 12,
                            SuggestionId = 43,
                            Value = 10.0
                        },
                        new
                        {
                            Id = 51,
                            ReviewCategoryId = 6,
                            SuggestionId = 75,
                            Value = 10.0
                        },
                        new
                        {
                            Id = 52,
                            ReviewCategoryId = 7,
                            SuggestionId = 75,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 53,
                            ReviewCategoryId = 8,
                            SuggestionId = 75,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 54,
                            ReviewCategoryId = 9,
                            SuggestionId = 75,
                            Value = 10.0
                        },
                        new
                        {
                            Id = 55,
                            ReviewCategoryId = 10,
                            SuggestionId = 75,
                            Value = 10.0
                        },
                        new
                        {
                            Id = 56,
                            ReviewCategoryId = 11,
                            SuggestionId = 75,
                            Value = 10.0
                        },
                        new
                        {
                            Id = 57,
                            ReviewCategoryId = 12,
                            SuggestionId = 75,
                            Value = 10.0
                        },
                        new
                        {
                            Id = 58,
                            ReviewCategoryId = 6,
                            SuggestionId = 15,
                            Value = 10.0
                        },
                        new
                        {
                            Id = 59,
                            ReviewCategoryId = 7,
                            SuggestionId = 15,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 60,
                            ReviewCategoryId = 8,
                            SuggestionId = 15,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 61,
                            ReviewCategoryId = 9,
                            SuggestionId = 15,
                            Value = 10.0
                        },
                        new
                        {
                            Id = 62,
                            ReviewCategoryId = 10,
                            SuggestionId = 15,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 63,
                            ReviewCategoryId = 11,
                            SuggestionId = 15,
                            Value = 10.0
                        },
                        new
                        {
                            Id = 64,
                            ReviewCategoryId = 12,
                            SuggestionId = 15,
                            Value = 10.0
                        },
                        new
                        {
                            Id = 65,
                            ReviewCategoryId = 6,
                            SuggestionId = 33,
                            Value = 10.0
                        },
                        new
                        {
                            Id = 66,
                            ReviewCategoryId = 7,
                            SuggestionId = 33,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 67,
                            ReviewCategoryId = 8,
                            SuggestionId = 33,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 68,
                            ReviewCategoryId = 9,
                            SuggestionId = 33,
                            Value = 10.0
                        },
                        new
                        {
                            Id = 69,
                            ReviewCategoryId = 10,
                            SuggestionId = 33,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 70,
                            ReviewCategoryId = 11,
                            SuggestionId = 33,
                            Value = 10.0
                        },
                        new
                        {
                            Id = 71,
                            ReviewCategoryId = 12,
                            SuggestionId = 33,
                            Value = 10.0
                        },
                        new
                        {
                            Id = 72,
                            ReviewCategoryId = 6,
                            SuggestionId = 7,
                            Value = 10.0
                        },
                        new
                        {
                            Id = 73,
                            ReviewCategoryId = 7,
                            SuggestionId = 7,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 74,
                            ReviewCategoryId = 8,
                            SuggestionId = 7,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 75,
                            ReviewCategoryId = 9,
                            SuggestionId = 7,
                            Value = 10.0
                        },
                        new
                        {
                            Id = 76,
                            ReviewCategoryId = 10,
                            SuggestionId = 7,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 77,
                            ReviewCategoryId = 11,
                            SuggestionId = 7,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 78,
                            ReviewCategoryId = 12,
                            SuggestionId = 7,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 79,
                            ReviewCategoryId = 6,
                            SuggestionId = 11,
                            Value = 10.0
                        },
                        new
                        {
                            Id = 80,
                            ReviewCategoryId = 7,
                            SuggestionId = 11,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 81,
                            ReviewCategoryId = 8,
                            SuggestionId = 11,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 82,
                            ReviewCategoryId = 9,
                            SuggestionId = 11,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 83,
                            ReviewCategoryId = 10,
                            SuggestionId = 11,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 84,
                            ReviewCategoryId = 11,
                            SuggestionId = 11,
                            Value = 9.0
                        },
                        new
                        {
                            Id = 85,
                            ReviewCategoryId = 12,
                            SuggestionId = 11,
                            Value = 10.0
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.SuggestionRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SuggestionRuleTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SuggestionRuleTypeId");

                    b.ToTable("SuggestionRules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SuggestionRuleTypeId = 1,
                            Text = "Cancellation and prepayment policies vary according to accommodations type. Please enter the dates of your stay and check what conditions apply to your preferred room."
                        },
                        new
                        {
                            Id = 2,
                            SuggestionRuleTypeId = 2,
                            Text = "Children of all ages are welcome."
                        },
                        new
                        {
                            Id = 3,
                            SuggestionRuleTypeId = 2,
                            Text = "Children 12 and above are considered adults at this property."
                        },
                        new
                        {
                            Id = 4,
                            SuggestionRuleTypeId = 2,
                            Text = "To see correct prices and occupancy info, add the number and ages of children in your group to your search."
                        },
                        new
                        {
                            Id = 5,
                            SuggestionRuleTypeId = 2,
                            Text = "Additional fees are not calculated automatically in the total cost and will have to be paid for separately during your stay."
                        },
                        new
                        {
                            Id = 6,
                            SuggestionRuleTypeId = 2,
                            Text = "This property doesn't offer extra beds."
                        },
                        new
                        {
                            Id = 7,
                            SuggestionRuleTypeId = 2,
                            Text = "The maximum number of cribs allowed depends on the room you choose. Double-check the maximum capacity for the room you selected."
                        },
                        new
                        {
                            Id = 8,
                            SuggestionRuleTypeId = 2,
                            Text = "All cribs and extra beds are subject to availability."
                        },
                        new
                        {
                            Id = 9,
                            SuggestionRuleTypeId = 3,
                            Text = "The minimum age for check-in is 18."
                        },
                        new
                        {
                            Id = 10,
                            SuggestionRuleTypeId = 4,
                            Text = "Pets are not allowed."
                        },
                        new
                        {
                            Id = 11,
                            SuggestionRuleTypeId = 5,
                            Text = "When booking more than 4 rooms, different policies and additional supplements may apply."
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.SuggestionRuleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SuggestionRuleTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Cancellation/prepayment"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Children & Beds"
                        },
                        new
                        {
                            Id = 3,
                            Type = "Age restriction"
                        },
                        new
                        {
                            Id = 4,
                            Type = "Pets"
                        },
                        new
                        {
                            Id = 5,
                            Type = "Groups"
                        },
                        new
                        {
                            Id = 6,
                            Type = "Cards accepted at this hotel"
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.SurroundingObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("SuggestionId")
                        .HasColumnType("int");

                    b.Property<int>("SurroundingObjectTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SuggestionId");

                    b.HasIndex("SurroundingObjectTypeId");

                    b.ToTable("SurroundingObjects");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.SurroundingObjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SurroundingObjectTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "What's nearby"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Beaches in the Neighborhood"
                        },
                        new
                        {
                            Id = 3,
                            Type = "Closest Airports"
                        },
                        new
                        {
                            Id = 4,
                            Type = "Top attractions"
                        },
                        new
                        {
                            Id = 5,
                            Type = "Public transit"
                        },
                        new
                        {
                            Id = 6,
                            Type = "Restaurants & cafes"
                        },
                        new
                        {
                            Id = 7,
                            Type = "Natural Beauty"
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DisplayName")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("SaltHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayName = "Admin",
                            Email = "apartproject@ukr.net",
                            FirstName = "Admin",
                            LastName = "Admin",
                            PasswordHash = "yZ31aVQ7LJsxbbLw+k8wr+R4MIjmsarDSHIyORD2E/c=",
                            RoleId = 1,
                            SaltHash = "5kMcP+uiuDBVUtywUz+W/A=="
                        },
                        new
                        {
                            Id = 2,
                            DisplayName = "Admin2",
                            Email = "inko10092001@gmail.com",
                            FirstName = "Admin2 FirstName",
                            LastName = "Admin2 LastName",
                            PasswordHash = "SPkh8lLW5GvhYfEKMk9eoxG54v7SntfWGqvW4w8WSeo=",
                            RoleId = 1,
                            SaltHash = "4GcMwBXa7wz82VqcGrk8Jw=="
                        },
                        new
                        {
                            Id = 3,
                            DisplayName = "UserTest",
                            Email = "kanyesupreme@ukr.net",
                            FirstName = "User FirstName",
                            LastName = "Test",
                            PasswordHash = "WOtG1AXmEOExiWIqkjtvaswoKwkK2wzPO4lkeyhMhNc=",
                            RoleId = 2,
                            SaltHash = "SB13sgnTfmqDCzEk+yO8fw=="
                        },
                        new
                        {
                            Id = 4,
                            DisplayName = "UserTest2",
                            Email = "prokter222@gmail.com",
                            FirstName = "User2 FirstName",
                            LastName = "User2 LastName",
                            PasswordHash = "j3LoMuzqObUVFTDndGzvPz15tEWvyYeo1g5oQvGCnhM=",
                            RoleId = 2,
                            SaltHash = "8yS7U//nE6iw1kvGIgUsQQ=="
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.UserData.TempUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("TempUsers");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.UserProfile.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Favorites");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.UserProfile.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Gender");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Male"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Female"
                        });
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.UserProfile.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Nationality")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 4, 14, 22, 43, 28, 815, DateTimeKind.Local).AddTicks(2477));

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasFilter("[AddressId] IS NOT NULL");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("GenderId");

                    b.HasIndex("ImageId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            CurrencyId = 1,
                            GenderId = 1,
                            ImageId = 1,
                            LanguageId = 1,
                            RegisterDate = new DateTime(2022, 4, 14, 19, 43, 28, 815, DateTimeKind.Utc).AddTicks(2941),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            CurrencyId = 2,
                            GenderId = 1,
                            ImageId = 2,
                            LanguageId = 2,
                            RegisterDate = new DateTime(2022, 4, 14, 19, 43, 28, 815, DateTimeKind.Utc).AddTicks(2970),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 3,
                            CurrencyId = 2,
                            GenderId = 1,
                            ImageId = 1,
                            LanguageId = 1,
                            RegisterDate = new DateTime(2022, 4, 14, 19, 43, 28, 815, DateTimeKind.Utc).AddTicks(2976),
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            AddressId = 4,
                            CurrencyId = 2,
                            GenderId = 1,
                            ImageId = 2,
                            LanguageId = 2,
                            RegisterDate = new DateTime(2022, 4, 14, 19, 43, 28, 815, DateTimeKind.Utc).AddTicks(2981),
                            UserId = 4
                        });
                });

            modelBuilder.Entity("FacilitySuggestion", b =>
                {
                    b.Property<int>("FacilitiesId")
                        .HasColumnType("int");

                    b.Property<int>("SuggestionsId")
                        .HasColumnType("int");

                    b.HasKey("FacilitiesId", "SuggestionsId");

                    b.HasIndex("SuggestionsId");

                    b.ToTable("FacilitySuggestion");
                });

            modelBuilder.Entity("FavoriteSuggestion", b =>
                {
                    b.Property<int>("FavoritesId")
                        .HasColumnType("int");

                    b.Property<int>("SuggestionsId")
                        .HasColumnType("int");

                    b.HasKey("FavoritesId", "SuggestionsId");

                    b.HasIndex("SuggestionsId");

                    b.ToTable("FavoriteSuggestion");
                });

            modelBuilder.Entity("LanguageSuggestion", b =>
                {
                    b.Property<int>("LanguagesId")
                        .HasColumnType("int");

                    b.Property<int>("SuggestionsId")
                        .HasColumnType("int");

                    b.HasKey("LanguagesId", "SuggestionsId");

                    b.HasIndex("SuggestionsId");

                    b.ToTable("LanguageSuggestion");
                });

            modelBuilder.Entity("StayBookingTempUser", b =>
                {
                    b.Property<int>("GuestsId")
                        .HasColumnType("int");

                    b.Property<int>("StayBookingsId")
                        .HasColumnType("int");

                    b.HasKey("GuestsId", "StayBookingsId");

                    b.HasIndex("StayBookingsId");

                    b.ToTable("StayBookingTempUser");
                });

            modelBuilder.Entity("SuggestionSuggestionRule", b =>
                {
                    b.Property<int>("SuggestionRulesId")
                        .HasColumnType("int");

                    b.Property<int>("SuggestionsId")
                        .HasColumnType("int");

                    b.HasKey("SuggestionRulesId", "SuggestionsId");

                    b.HasIndex("SuggestionsId");

                    b.ToTable("SuggestionSuggestionRule");
                });

            modelBuilder.Entity("BedSuggestion", b =>
                {
                    b.HasOne("CloneBookingAPI.Database.Models.Suggestions.Bed", null)
                        .WithMany()
                        .HasForeignKey("BedsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.Suggestion", null)
                        .WithMany()
                        .HasForeignKey("SuggestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CloneBookingAPI.Database.Models.InterestPlace", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.Suggestion", "Suggestion")
                        .WithMany("InterestPlaces")
                        .HasForeignKey("SuggestionId");

                    b.Navigation("Suggestion");
                });

            modelBuilder.Entity("CloneBookingAPI.Database.Models.Suggestions.Apartment", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.Suggestion", "Suggestion")
                        .WithMany("Apartments")
                        .HasForeignKey("SuggestionId");

                    b.Navigation("Suggestion");
                });

            modelBuilder.Entity("CloneBookingAPI.Database.Models.Suggestions.Bed", b =>
                {
                    b.HasOne("CloneBookingAPI.Database.Models.Suggestions.BedType", "BedType")
                        .WithMany("Beds")
                        .HasForeignKey("BedTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BedType");
                });

            modelBuilder.Entity("CloneBookingAPI.Database.Models.Suggestions.ContactDetails", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.Suggestion", "Suggestion")
                        .WithOne("ContactDetails")
                        .HasForeignKey("CloneBookingAPI.Database.Models.Suggestions.ContactDetails", "SuggestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Suggestion");
                });

            modelBuilder.Entity("CloneBookingAPI.Database.Models.ViewModels.ApartmentBookedPeriod", b =>
                {
                    b.HasOne("CloneBookingAPI.Database.Models.Suggestions.Apartment", "Apartment")
                        .WithMany("ApartmentsBookedPeriods")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloneBookingAPI.Database.Models.Suggestions.BookedPeriod", "BookedPeriod")
                        .WithMany("ApartmentsBookedPeriods")
                        .HasForeignKey("BookedPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("BookedPeriod");
                });

            modelBuilder.Entity("CloneBookingAPI.Database.Models.ViewModels.ApartmentRoomType", b =>
                {
                    b.HasOne("CloneBookingAPI.Database.Models.Suggestions.Apartment", "Apartment")
                        .WithMany("ApartmentsRoomTypes")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.RoomType", "RoomType")
                        .WithMany("ApartmentsRoomTypes")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("CloneBookingAPI.Database.Models.ViewModels.SuggestionFileModel", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.FileModel", "Image")
                        .WithMany("SuggestionsFileModels")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.Suggestion", "Suggestion")
                        .WithMany("SuggestionsFileModels")
                        .HasForeignKey("SuggestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Suggestion");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.AreaInfo", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.AreaInfoType", "AreaInfoType")
                        .WithMany("AreaInfos")
                        .HasForeignKey("AreaInfoTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AreaInfoType");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.BookingCategory", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.FileModel", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Cart", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("CloneBookingAPI.Services.Database.Models.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Facility", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.FacilityType", "FacilityType")
                        .WithMany("Facilities")
                        .HasForeignKey("FacilityTypeId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.FileModel", "Image")
                        .WithMany("Facilities")
                        .HasForeignKey("ImageId");

                    b.Navigation("FacilityType");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.FacilityType", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.FileModel", "Image")
                        .WithMany("FacilityTypes")
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.FlightBooking", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Cart", null)
                        .WithMany("FlightBookings")
                        .HasForeignKey("CartId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.User", null)
                        .WithMany("FlightBookings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Location.Address", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Location.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Location.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Location.District", "District")
                        .WithOne("Address")
                        .HasForeignKey("CloneBookingAPI.Services.Database.Models.Location.Address", "DistrictId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Location.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("District");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Location.Airport", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Location.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloneBookingAPI.Services.Database.Models.FileModel", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Address");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Location.City", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Location.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.FileModel", "Image")
                        .WithMany("Cities")
                        .HasForeignKey("ImageId");

                    b.Navigation("Country");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Location.Country", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.FileModel", "Image")
                        .WithMany("Countries")
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Location.District", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.FileModel", "Image")
                        .WithMany("Districts")
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Location.Region", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Location.City", "City")
                        .WithOne("Region")
                        .HasForeignKey("CloneBookingAPI.Services.Database.Models.Location.Region", "CityId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.FileModel", "Image")
                        .WithMany("Regions")
                        .HasForeignKey("ImageId");

                    b.Navigation("City");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Notification", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.User", "EmitterUser")
                        .WithMany("Notifications")
                        .HasForeignKey("EmitterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloneBookingAPI.Services.Database.Models.FileModel", "Image")
                        .WithMany("Notifications")
                        .HasForeignKey("ImageId");

                    b.Navigation("EmitterUser");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Payment.CreditCard", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.CardType", "CardType")
                        .WithMany("CreditCards")
                        .HasForeignKey("CardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardType");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Payment.Payment", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Payment.CreditCard", "CreditCard")
                        .WithMany("Payments")
                        .HasForeignKey("CreditCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloneBookingAPI.Services.Database.Models.PaymentType", "PaymentType")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditCard");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Review.Review", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Configurations.Review.ReviewMessage", "ReviewMessage")
                        .WithOne("Review")
                        .HasForeignKey("CloneBookingAPI.Services.Database.Models.Review.Review", "ReviewMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.Suggestion", "Suggestion")
                        .WithMany("Reviews")
                        .HasForeignKey("SuggestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloneBookingAPI.Services.Database.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId");

                    b.Navigation("ReviewMessage");

                    b.Navigation("Suggestion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Review.ReviewCategory", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.Suggestion", "Suggestion")
                        .WithMany("ReviewCategories")
                        .HasForeignKey("SuggestionId");

                    b.Navigation("Suggestion");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Services.AirportTaxiBooking", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Cart", null)
                        .WithMany("AirportTaxiBookings")
                        .HasForeignKey("CartId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.User", null)
                        .WithMany("AirportTaxiBookings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Services.AttractionBooking", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Cart", null)
                        .WithMany("AttractionBookings")
                        .HasForeignKey("CartId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.User", null)
                        .WithMany("AttractionBookings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Services.CarRentalBooking", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Cart", null)
                        .WithMany("CarRentalBookings")
                        .HasForeignKey("CartId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.User", null)
                        .WithMany("CarRentalBookings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.StayBooking", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Location.Address", null)
                        .WithMany("StayBooking")
                        .HasForeignKey("AddressId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.BookingCategory", null)
                        .WithMany("Bookings")
                        .HasForeignKey("BookingCategoryId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Cart", null)
                        .WithMany("StayBookings")
                        .HasForeignKey("CartId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Payment.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Payment.BookingPrice", "Price")
                        .WithOne("Booking")
                        .HasForeignKey("CloneBookingAPI.Services.Database.Models.StayBooking", "PriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloneBookingAPI.Services.Database.Models.ServiceCategory", null)
                        .WithMany("StayBookings")
                        .HasForeignKey("ServiceCategoryId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.Suggestion", "Suggestion")
                        .WithMany("StayBookings")
                        .HasForeignKey("SuggestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloneBookingAPI.Services.Database.Models.User", "User")
                        .WithMany("StayBookings")
                        .HasForeignKey("UserId");

                    b.Navigation("Payment");

                    b.Navigation("Price");

                    b.Navigation("Suggestion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.Room", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloneBookingAPI.Services.Database.Models.StayBooking", null)
                        .WithMany("Rooms")
                        .HasForeignKey("StayBookingId");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.Suggestion", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Location.Address", "Address")
                        .WithMany("Suggestions")
                        .HasForeignKey("AddressId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.BookingCategory", "BookingCategory")
                        .WithMany("Suggestions")
                        .HasForeignKey("BookingCategoryId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.ServiceCategory", "ServiceCategory")
                        .WithMany("Suggestions")
                        .HasForeignKey("ServiceCategoryId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.User", "User")
                        .WithMany("Suggestions")
                        .HasForeignKey("UserId");

                    b.Navigation("Address");

                    b.Navigation("BookingCategory");

                    b.Navigation("ServiceCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.SuggestionHighlight", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.FileModel", "Image")
                        .WithMany("SuggestionHighlights")
                        .HasForeignKey("FileId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.Room", "Room")
                        .WithMany("Facilities")
                        .HasForeignKey("RoomId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.RoomType", null)
                        .WithMany("Highlights")
                        .HasForeignKey("RoomTypeId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.Suggestion", "Suggestion")
                        .WithMany("Highlights")
                        .HasForeignKey("SuggestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Room");

                    b.Navigation("Suggestion");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.SuggestionReviewGrade", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Review.ReviewCategory", "ReviewCategory")
                        .WithMany("SuggestionReviewGrades")
                        .HasForeignKey("ReviewCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.Suggestion", "Suggestion")
                        .WithMany("SuggestionReviewGrades")
                        .HasForeignKey("SuggestionId");

                    b.Navigation("ReviewCategory");

                    b.Navigation("Suggestion");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.SuggestionRule", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.SuggestionRuleType", "SuggestionRuleType")
                        .WithMany("SuggestionRules")
                        .HasForeignKey("SuggestionRuleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SuggestionRuleType");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.SurroundingObject", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.Suggestion", "Suggestion")
                        .WithMany("SurroundingObjects")
                        .HasForeignKey("SuggestionId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.SurroundingObjectType", "SurroundingObjectType")
                        .WithMany("SurroundingObjects")
                        .HasForeignKey("SurroundingObjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Suggestion");

                    b.Navigation("SurroundingObjectType");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.User", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Language", null)
                        .WithMany("Users")
                        .HasForeignKey("LanguageId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.UserProfile.Favorite", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.User", "User")
                        .WithOne("Favorite")
                        .HasForeignKey("CloneBookingAPI.Services.Database.Models.UserProfile.Favorite", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.UserProfile.UserProfile", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Location.Address", "Address")
                        .WithOne("UserProfile")
                        .HasForeignKey("CloneBookingAPI.Services.Database.Models.UserProfile.UserProfile", "AddressId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Currency", "Currency")
                        .WithMany("UserProfiles")
                        .HasForeignKey("CurrencyId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.UserProfile.Gender", "Gender")
                        .WithMany("UserProfiles")
                        .HasForeignKey("GenderId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.FileModel", "Image")
                        .WithMany("UserProfiles")
                        .HasForeignKey("ImageId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("CloneBookingAPI.Services.Database.Models.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("CloneBookingAPI.Services.Database.Models.UserProfile.UserProfile", "UserId");

                    b.Navigation("Address");

                    b.Navigation("Currency");

                    b.Navigation("Gender");

                    b.Navigation("Image");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FacilitySuggestion", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Facility", null)
                        .WithMany()
                        .HasForeignKey("FacilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.Suggestion", null)
                        .WithMany()
                        .HasForeignKey("SuggestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FavoriteSuggestion", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.UserProfile.Favorite", null)
                        .WithMany()
                        .HasForeignKey("FavoritesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.Suggestion", null)
                        .WithMany()
                        .HasForeignKey("SuggestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LanguageSuggestion", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.Suggestion", null)
                        .WithMany()
                        .HasForeignKey("SuggestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StayBookingTempUser", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.UserData.TempUser", null)
                        .WithMany()
                        .HasForeignKey("GuestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloneBookingAPI.Services.Database.Models.StayBooking", null)
                        .WithMany()
                        .HasForeignKey("StayBookingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SuggestionSuggestionRule", b =>
                {
                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.SuggestionRule", null)
                        .WithMany()
                        .HasForeignKey("SuggestionRulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloneBookingAPI.Services.Database.Models.Suggestions.Suggestion", null)
                        .WithMany()
                        .HasForeignKey("SuggestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CloneBookingAPI.Database.Models.Suggestions.Apartment", b =>
                {
                    b.Navigation("ApartmentsBookedPeriods");

                    b.Navigation("ApartmentsRoomTypes");
                });

            modelBuilder.Entity("CloneBookingAPI.Database.Models.Suggestions.BedType", b =>
                {
                    b.Navigation("Beds");
                });

            modelBuilder.Entity("CloneBookingAPI.Database.Models.Suggestions.BookedPeriod", b =>
                {
                    b.Navigation("ApartmentsBookedPeriods");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Configurations.Review.ReviewMessage", b =>
                {
                    b.Navigation("Review");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.AreaInfoType", b =>
                {
                    b.Navigation("AreaInfos");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.BookingCategory", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Suggestions");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.CardType", b =>
                {
                    b.Navigation("CreditCards");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Cart", b =>
                {
                    b.Navigation("AirportTaxiBookings");

                    b.Navigation("AttractionBookings");

                    b.Navigation("CarRentalBookings");

                    b.Navigation("FlightBookings");

                    b.Navigation("StayBookings");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Currency", b =>
                {
                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.FacilityType", b =>
                {
                    b.Navigation("Facilities");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.FileModel", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Countries");

                    b.Navigation("Districts");

                    b.Navigation("Facilities");

                    b.Navigation("FacilityTypes");

                    b.Navigation("Notifications");

                    b.Navigation("Regions");

                    b.Navigation("SuggestionHighlights");

                    b.Navigation("SuggestionsFileModels");

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Language", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Location.Address", b =>
                {
                    b.Navigation("StayBooking");

                    b.Navigation("Suggestions");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Location.City", b =>
                {
                    b.Navigation("Region");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Location.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Location.District", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Payment.BookingPrice", b =>
                {
                    b.Navigation("Booking");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Payment.CreditCard", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.PaymentType", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Review.ReviewCategory", b =>
                {
                    b.Navigation("SuggestionReviewGrades");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.ServiceCategory", b =>
                {
                    b.Navigation("StayBookings");

                    b.Navigation("Suggestions");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.StayBooking", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.Room", b =>
                {
                    b.Navigation("Facilities");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.RoomType", b =>
                {
                    b.Navigation("ApartmentsRoomTypes");

                    b.Navigation("Highlights");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.Suggestion", b =>
                {
                    b.Navigation("Apartments");

                    b.Navigation("ContactDetails");

                    b.Navigation("Highlights");

                    b.Navigation("InterestPlaces");

                    b.Navigation("ReviewCategories");

                    b.Navigation("Reviews");

                    b.Navigation("StayBookings");

                    b.Navigation("SuggestionReviewGrades");

                    b.Navigation("SuggestionsFileModels");

                    b.Navigation("SurroundingObjects");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.SuggestionRuleType", b =>
                {
                    b.Navigation("SuggestionRules");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.Suggestions.SurroundingObjectType", b =>
                {
                    b.Navigation("SurroundingObjects");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.User", b =>
                {
                    b.Navigation("AirportTaxiBookings");

                    b.Navigation("AttractionBookings");

                    b.Navigation("CarRentalBookings");

                    b.Navigation("Cart");

                    b.Navigation("Favorite");

                    b.Navigation("FlightBookings");

                    b.Navigation("Notifications");

                    b.Navigation("Profile");

                    b.Navigation("Reviews");

                    b.Navigation("StayBookings");

                    b.Navigation("Suggestions");
                });

            modelBuilder.Entity("CloneBookingAPI.Services.Database.Models.UserProfile.Gender", b =>
                {
                    b.Navigation("UserProfiles");
                });
#pragma warning restore 612, 618
        }
    }
}
